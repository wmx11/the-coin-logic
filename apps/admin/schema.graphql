# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  isSubscribedToEmail: Boolean
  password: PasswordState
  subscribedToProductTill: DateTime
  referrer: String
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isSubscribedToEmail: BooleanFilter
  subscribedToProductTill: DateTimeNullableFilter
  referrer: StringFilter
  projects: ProjectManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ProjectManyRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isSubscribedToEmail: OrderDirection
  subscribedToProductTill: OrderDirection
  referrer: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  isSubscribedToEmail: Boolean
  password: String
  subscribedToProductTill: DateTime
  referrer: String
  projects: ProjectRelateToManyForUpdateInput
}

input ProjectRelateToManyForUpdateInput {
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  isSubscribedToEmail: Boolean
  password: String
  subscribedToProductTill: DateTime
  referrer: String
  projects: ProjectRelateToManyForCreateInput
}

input ProjectRelateToManyForCreateInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

type MarketStat {
  id: ID!
  price: Float
  marketCap: Float
  totalSupply: Float
  liquidity: Float
  pairPrice: Float
  holders: Float
  avgHoldings: Float
  customData: JSON
  project: Project
  dateAdded: DateTime
}

input MarketStatWhereUniqueInput {
  id: ID
}

input MarketStatWhereInput {
  AND: [MarketStatWhereInput!]
  OR: [MarketStatWhereInput!]
  NOT: [MarketStatWhereInput!]
  id: IDFilter
  price: FloatNullableFilter
  marketCap: FloatNullableFilter
  totalSupply: FloatNullableFilter
  liquidity: FloatNullableFilter
  pairPrice: FloatNullableFilter
  holders: FloatNullableFilter
  avgHoldings: FloatNullableFilter
  project: ProjectWhereInput
  dateAdded: DateTimeNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input MarketStatOrderByInput {
  id: OrderDirection
  price: OrderDirection
  marketCap: OrderDirection
  totalSupply: OrderDirection
  liquidity: OrderDirection
  pairPrice: OrderDirection
  holders: OrderDirection
  avgHoldings: OrderDirection
  dateAdded: OrderDirection
}

input MarketStatUpdateInput {
  price: Float
  marketCap: Float
  totalSupply: Float
  liquidity: Float
  pairPrice: Float
  holders: Float
  avgHoldings: Float
  customData: JSON
  project: ProjectRelateToOneForUpdateInput
  dateAdded: DateTime
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input MarketStatUpdateArgs {
  where: MarketStatWhereUniqueInput!
  data: MarketStatUpdateInput!
}

input MarketStatCreateInput {
  price: Float
  marketCap: Float
  totalSupply: Float
  liquidity: Float
  pairPrice: Float
  holders: Float
  avgHoldings: Float
  customData: JSON
  project: ProjectRelateToOneForCreateInput
  dateAdded: DateTime
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

type Project {
  id: ID!
  name: String
  slug: String
  logo: ImageFieldOutput
  enabled: Boolean
  isListed: Boolean
  trackHolders: Boolean
  isRebasing: Boolean
  initialized: Boolean
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  contractAddress: String
  pairAddress: String
  burnAddress: String
  liquidityPair(
    where: LiquidityPairWhereInput! = {}
    orderBy: [LiquidityPairOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LiquidityPair!]
  liquidityPairCount(where: LiquidityPairWhereInput! = {}): Int
  network: Network
  trackHoldersFromTokenAmount: Float
  description: String
  ABI: JSON
  customData: JSON
  sellTax: Float
  buyTax: Float
  rebasePeriod: String
  apy: Float
  dailyApy: Float
  website: String
  whitepaper: String
  twitter: String
  telegram: String
  discord: String
  reddit: String
  youtube: String
  github: String
  dateAdded: DateTime
  launchDate: DateTime
  launchBlock: Int
  trackFromBlock: Int
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  enabled: BooleanFilter
  isListed: BooleanFilter
  trackHolders: BooleanFilter
  isRebasing: BooleanFilter
  initialized: BooleanFilter
  tags: TagManyRelationFilter
  contractAddress: StringFilter
  pairAddress: StringFilter
  burnAddress: StringFilter
  liquidityPair: LiquidityPairManyRelationFilter
  network: NetworkWhereInput
  trackHoldersFromTokenAmount: FloatNullableFilter
  description: StringFilter
  sellTax: FloatNullableFilter
  buyTax: FloatNullableFilter
  rebasePeriod: StringFilter
  apy: FloatNullableFilter
  dailyApy: FloatNullableFilter
  website: StringFilter
  whitepaper: StringFilter
  twitter: StringFilter
  telegram: StringFilter
  discord: StringFilter
  reddit: StringFilter
  youtube: StringFilter
  github: StringFilter
  dateAdded: DateTimeNullableFilter
  launchDate: DateTimeNullableFilter
  launchBlock: IntNullableFilter
  trackFromBlock: IntNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input LiquidityPairManyRelationFilter {
  every: LiquidityPairWhereInput
  some: LiquidityPairWhereInput
  none: LiquidityPairWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  enabled: OrderDirection
  isListed: OrderDirection
  trackHolders: OrderDirection
  isRebasing: OrderDirection
  initialized: OrderDirection
  contractAddress: OrderDirection
  pairAddress: OrderDirection
  burnAddress: OrderDirection
  trackHoldersFromTokenAmount: OrderDirection
  description: OrderDirection
  sellTax: OrderDirection
  buyTax: OrderDirection
  rebasePeriod: OrderDirection
  apy: OrderDirection
  dailyApy: OrderDirection
  website: OrderDirection
  whitepaper: OrderDirection
  twitter: OrderDirection
  telegram: OrderDirection
  discord: OrderDirection
  reddit: OrderDirection
  youtube: OrderDirection
  github: OrderDirection
  dateAdded: OrderDirection
  launchDate: OrderDirection
  launchBlock: OrderDirection
  trackFromBlock: OrderDirection
}

input ProjectUpdateInput {
  name: String
  slug: String
  logo: ImageFieldInput
  enabled: Boolean
  isListed: Boolean
  trackHolders: Boolean
  isRebasing: Boolean
  initialized: Boolean
  tags: TagRelateToManyForUpdateInput
  contractAddress: String
  pairAddress: String
  burnAddress: String
  liquidityPair: LiquidityPairRelateToManyForUpdateInput
  network: NetworkRelateToOneForUpdateInput
  trackHoldersFromTokenAmount: Float
  description: String
  ABI: JSON
  customData: JSON
  sellTax: Float
  buyTax: Float
  rebasePeriod: String
  apy: Float
  dailyApy: Float
  website: String
  whitepaper: String
  twitter: String
  telegram: String
  discord: String
  reddit: String
  youtube: String
  github: String
  dateAdded: DateTime
  launchDate: DateTime
  launchBlock: Int
  trackFromBlock: Int
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input LiquidityPairRelateToManyForUpdateInput {
  disconnect: [LiquidityPairWhereUniqueInput!]
  set: [LiquidityPairWhereUniqueInput!]
  create: [LiquidityPairCreateInput!]
  connect: [LiquidityPairWhereUniqueInput!]
}

input NetworkRelateToOneForUpdateInput {
  create: NetworkCreateInput
  connect: NetworkWhereUniqueInput
  disconnect: Boolean
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  name: String
  slug: String
  logo: ImageFieldInput
  enabled: Boolean
  isListed: Boolean
  trackHolders: Boolean
  isRebasing: Boolean
  initialized: Boolean
  tags: TagRelateToManyForCreateInput
  contractAddress: String
  pairAddress: String
  burnAddress: String
  liquidityPair: LiquidityPairRelateToManyForCreateInput
  network: NetworkRelateToOneForCreateInput
  trackHoldersFromTokenAmount: Float
  description: String
  ABI: JSON
  customData: JSON
  sellTax: Float
  buyTax: Float
  rebasePeriod: String
  apy: Float
  dailyApy: Float
  website: String
  whitepaper: String
  twitter: String
  telegram: String
  discord: String
  reddit: String
  youtube: String
  github: String
  dateAdded: DateTime
  launchDate: DateTime
  launchBlock: Int
  trackFromBlock: Int
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input LiquidityPairRelateToManyForCreateInput {
  create: [LiquidityPairCreateInput!]
  connect: [LiquidityPairWhereUniqueInput!]
}

input NetworkRelateToOneForCreateInput {
  create: NetworkCreateInput
  connect: NetworkWhereUniqueInput
}

type Token {
  id: ID!
  name: String
  address: String
  ABI: JSON
  network: Network
}

input TokenWhereUniqueInput {
  id: ID
}

input TokenWhereInput {
  AND: [TokenWhereInput!]
  OR: [TokenWhereInput!]
  NOT: [TokenWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  network: NetworkWhereInput
}

input TokenOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
}

input TokenUpdateInput {
  name: String
  address: String
  ABI: JSON
  network: NetworkRelateToOneForUpdateInput
}

input TokenUpdateArgs {
  where: TokenWhereUniqueInput!
  data: TokenUpdateInput!
}

input TokenCreateInput {
  name: String
  address: String
  ABI: JSON
  network: NetworkRelateToOneForCreateInput
}

type StableLiquidityPair {
  id: ID!
  name: String
  address: String
  pairToken(
    where: TokenWhereInput! = {}
    orderBy: [TokenOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Token!]
  pairTokenCount(where: TokenWhereInput! = {}): Int
  network: Network
}

input StableLiquidityPairWhereUniqueInput {
  id: ID
}

input StableLiquidityPairWhereInput {
  AND: [StableLiquidityPairWhereInput!]
  OR: [StableLiquidityPairWhereInput!]
  NOT: [StableLiquidityPairWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  pairToken: TokenManyRelationFilter
  network: NetworkWhereInput
}

input TokenManyRelationFilter {
  every: TokenWhereInput
  some: TokenWhereInput
  none: TokenWhereInput
}

input StableLiquidityPairOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
}

input StableLiquidityPairUpdateInput {
  name: String
  address: String
  pairToken: TokenRelateToManyForUpdateInput
  network: NetworkRelateToOneForUpdateInput
}

input TokenRelateToManyForUpdateInput {
  disconnect: [TokenWhereUniqueInput!]
  set: [TokenWhereUniqueInput!]
  create: [TokenCreateInput!]
  connect: [TokenWhereUniqueInput!]
}

input StableLiquidityPairUpdateArgs {
  where: StableLiquidityPairWhereUniqueInput!
  data: StableLiquidityPairUpdateInput!
}

input StableLiquidityPairCreateInput {
  name: String
  address: String
  pairToken: TokenRelateToManyForCreateInput
  network: NetworkRelateToOneForCreateInput
}

input TokenRelateToManyForCreateInput {
  create: [TokenCreateInput!]
  connect: [TokenWhereUniqueInput!]
}

type LiquidityPair {
  id: ID!
  name: String
  address: String
  stablePair: StableLiquidityPair
  network: Network
  project: Project
  exchange: Exchange
}

input LiquidityPairWhereUniqueInput {
  id: ID
}

input LiquidityPairWhereInput {
  AND: [LiquidityPairWhereInput!]
  OR: [LiquidityPairWhereInput!]
  NOT: [LiquidityPairWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  stablePair: StableLiquidityPairWhereInput
  network: NetworkWhereInput
  project: ProjectWhereInput
  exchange: ExchangeWhereInput
}

input LiquidityPairOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
}

input LiquidityPairUpdateInput {
  name: String
  address: String
  stablePair: StableLiquidityPairRelateToOneForUpdateInput
  network: NetworkRelateToOneForUpdateInput
  project: ProjectRelateToOneForUpdateInput
  exchange: ExchangeRelateToOneForUpdateInput
}

input StableLiquidityPairRelateToOneForUpdateInput {
  create: StableLiquidityPairCreateInput
  connect: StableLiquidityPairWhereUniqueInput
  disconnect: Boolean
}

input ExchangeRelateToOneForUpdateInput {
  create: ExchangeCreateInput
  connect: ExchangeWhereUniqueInput
  disconnect: Boolean
}

input LiquidityPairUpdateArgs {
  where: LiquidityPairWhereUniqueInput!
  data: LiquidityPairUpdateInput!
}

input LiquidityPairCreateInput {
  name: String
  address: String
  stablePair: StableLiquidityPairRelateToOneForCreateInput
  network: NetworkRelateToOneForCreateInput
  project: ProjectRelateToOneForCreateInput
  exchange: ExchangeRelateToOneForCreateInput
}

input StableLiquidityPairRelateToOneForCreateInput {
  create: StableLiquidityPairCreateInput
  connect: StableLiquidityPairWhereUniqueInput
}

input ExchangeRelateToOneForCreateInput {
  create: ExchangeCreateInput
  connect: ExchangeWhereUniqueInput
}

type Network {
  id: ID!
  name: String
  slug: String
  logo: ImageFieldOutput
  url: String
}

input NetworkWhereUniqueInput {
  id: ID
}

input NetworkWhereInput {
  AND: [NetworkWhereInput!]
  OR: [NetworkWhereInput!]
  NOT: [NetworkWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  url: StringFilter
}

input NetworkOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  url: OrderDirection
}

input NetworkUpdateInput {
  name: String
  slug: String
  logo: ImageFieldInput
  url: String
}

input NetworkUpdateArgs {
  where: NetworkWhereUniqueInput!
  data: NetworkUpdateInput!
}

input NetworkCreateInput {
  name: String
  slug: String
  logo: ImageFieldInput
  url: String
}

type Exchange {
  id: ID!
  name: String
  logo: ImageFieldOutput
  url: String
  tradeUrl: String
}

input ExchangeWhereUniqueInput {
  id: ID
}

input ExchangeWhereInput {
  AND: [ExchangeWhereInput!]
  OR: [ExchangeWhereInput!]
  NOT: [ExchangeWhereInput!]
  id: IDFilter
  name: StringFilter
  url: StringFilter
  tradeUrl: StringFilter
}

input ExchangeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  url: OrderDirection
  tradeUrl: OrderDirection
}

input ExchangeUpdateInput {
  name: String
  logo: ImageFieldInput
  url: String
  tradeUrl: String
}

input ExchangeUpdateArgs {
  where: ExchangeWhereUniqueInput!
  data: ExchangeUpdateInput!
}

input ExchangeCreateInput {
  name: String
  logo: ImageFieldInput
  url: String
  tradeUrl: String
}

type Tag {
  id: ID!
  name: String
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  projects: ProjectManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  projects: ProjectRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  projects: ProjectRelateToManyForCreateInput
}

type DiscordBot {
  id: ID!
  name: String
  enabled: Boolean
  presence: String
  botId: String
  apiKey: String
  tracking: String
  customTracking: String
  project: Project
}

input DiscordBotWhereUniqueInput {
  id: ID
}

input DiscordBotWhereInput {
  AND: [DiscordBotWhereInput!]
  OR: [DiscordBotWhereInput!]
  NOT: [DiscordBotWhereInput!]
  id: IDFilter
  name: StringFilter
  enabled: BooleanFilter
  presence: StringFilter
  botId: StringFilter
  apiKey: StringFilter
  tracking: StringNullableFilter
  customTracking: StringFilter
  project: ProjectWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DiscordBotOrderByInput {
  id: OrderDirection
  name: OrderDirection
  enabled: OrderDirection
  presence: OrderDirection
  botId: OrderDirection
  apiKey: OrderDirection
  tracking: OrderDirection
  customTracking: OrderDirection
}

input DiscordBotUpdateInput {
  name: String
  enabled: Boolean
  presence: String
  botId: String
  apiKey: String
  tracking: String
  customTracking: String
  project: ProjectRelateToOneForUpdateInput
}

input DiscordBotUpdateArgs {
  where: DiscordBotWhereUniqueInput!
  data: DiscordBotUpdateInput!
}

input DiscordBotCreateInput {
  name: String
  enabled: Boolean
  presence: String
  botId: String
  apiKey: String
  tracking: String
  customTracking: String
  project: ProjectRelateToOneForCreateInput
}

type Roadmap {
  id: ID!
  title: String
  isFinished: Boolean
  content: String
  estimated: String
  dateAdded: DateTime
}

input RoadmapWhereUniqueInput {
  id: ID
}

input RoadmapWhereInput {
  AND: [RoadmapWhereInput!]
  OR: [RoadmapWhereInput!]
  NOT: [RoadmapWhereInput!]
  id: IDFilter
  title: StringFilter
  isFinished: BooleanFilter
  content: StringFilter
  estimated: StringFilter
  dateAdded: DateTimeNullableFilter
}

input RoadmapOrderByInput {
  id: OrderDirection
  title: OrderDirection
  isFinished: OrderDirection
  content: OrderDirection
  estimated: OrderDirection
  dateAdded: OrderDirection
}

input RoadmapUpdateInput {
  title: String
  isFinished: Boolean
  content: String
  estimated: String
  dateAdded: DateTime
}

input RoadmapUpdateArgs {
  where: RoadmapWhereUniqueInput!
  data: RoadmapUpdateInput!
}

input RoadmapCreateInput {
  title: String
  isFinished: Boolean
  content: String
  estimated: String
  dateAdded: DateTime
}

type Content {
  id: ID!
  title: String
  slug: String
  image: ImageFieldOutput
  enabled: Boolean
  content: Content_content_Document
  blockName: ContentBlock
  dateAdded: DateTime
}

type Content_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ContentWhereUniqueInput {
  id: ID
}

input ContentWhereInput {
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  enabled: BooleanFilter
  blockName: ContentBlockWhereInput
  dateAdded: DateTimeNullableFilter
}

input ContentOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  enabled: OrderDirection
  dateAdded: OrderDirection
}

input ContentUpdateInput {
  title: String
  slug: String
  image: ImageFieldInput
  enabled: Boolean
  content: JSON
  blockName: ContentBlockRelateToOneForUpdateInput
  dateAdded: DateTime
}

input ContentBlockRelateToOneForUpdateInput {
  create: ContentBlockCreateInput
  connect: ContentBlockWhereUniqueInput
  disconnect: Boolean
}

input ContentUpdateArgs {
  where: ContentWhereUniqueInput!
  data: ContentUpdateInput!
}

input ContentCreateInput {
  title: String
  slug: String
  image: ImageFieldInput
  enabled: Boolean
  content: JSON
  blockName: ContentBlockRelateToOneForCreateInput
  dateAdded: DateTime
}

input ContentBlockRelateToOneForCreateInput {
  create: ContentBlockCreateInput
  connect: ContentBlockWhereUniqueInput
}

type ContentBlock {
  id: ID!
  title: String
  blockName: String
  enabled: Boolean
}

input ContentBlockWhereUniqueInput {
  id: ID
}

input ContentBlockWhereInput {
  AND: [ContentBlockWhereInput!]
  OR: [ContentBlockWhereInput!]
  NOT: [ContentBlockWhereInput!]
  id: IDFilter
  title: StringFilter
  blockName: StringFilter
  enabled: BooleanFilter
}

input ContentBlockOrderByInput {
  id: OrderDirection
  title: OrderDirection
  blockName: OrderDirection
  enabled: OrderDirection
}

input ContentBlockUpdateInput {
  title: String
  blockName: String
  enabled: Boolean
}

input ContentBlockUpdateArgs {
  where: ContentBlockWhereUniqueInput!
  data: ContentBlockUpdateInput!
}

input ContentBlockCreateInput {
  title: String
  blockName: String
  enabled: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createMarketStat(data: MarketStatCreateInput!): MarketStat
  createMarketStats(data: [MarketStatCreateInput!]!): [MarketStat]
  updateMarketStat(
    where: MarketStatWhereUniqueInput!
    data: MarketStatUpdateInput!
  ): MarketStat
  updateMarketStats(data: [MarketStatUpdateArgs!]!): [MarketStat]
  deleteMarketStat(where: MarketStatWhereUniqueInput!): MarketStat
  deleteMarketStats(where: [MarketStatWhereUniqueInput!]!): [MarketStat]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(
    where: ProjectWhereUniqueInput!
    data: ProjectUpdateInput!
  ): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createToken(data: TokenCreateInput!): Token
  createTokens(data: [TokenCreateInput!]!): [Token]
  updateToken(where: TokenWhereUniqueInput!, data: TokenUpdateInput!): Token
  updateTokens(data: [TokenUpdateArgs!]!): [Token]
  deleteToken(where: TokenWhereUniqueInput!): Token
  deleteTokens(where: [TokenWhereUniqueInput!]!): [Token]
  createStableLiquidityPair(
    data: StableLiquidityPairCreateInput!
  ): StableLiquidityPair
  createStableLiquidityPairs(
    data: [StableLiquidityPairCreateInput!]!
  ): [StableLiquidityPair]
  updateStableLiquidityPair(
    where: StableLiquidityPairWhereUniqueInput!
    data: StableLiquidityPairUpdateInput!
  ): StableLiquidityPair
  updateStableLiquidityPairs(
    data: [StableLiquidityPairUpdateArgs!]!
  ): [StableLiquidityPair]
  deleteStableLiquidityPair(
    where: StableLiquidityPairWhereUniqueInput!
  ): StableLiquidityPair
  deleteStableLiquidityPairs(
    where: [StableLiquidityPairWhereUniqueInput!]!
  ): [StableLiquidityPair]
  createLiquidityPair(data: LiquidityPairCreateInput!): LiquidityPair
  createLiquidityPairs(data: [LiquidityPairCreateInput!]!): [LiquidityPair]
  updateLiquidityPair(
    where: LiquidityPairWhereUniqueInput!
    data: LiquidityPairUpdateInput!
  ): LiquidityPair
  updateLiquidityPairs(data: [LiquidityPairUpdateArgs!]!): [LiquidityPair]
  deleteLiquidityPair(where: LiquidityPairWhereUniqueInput!): LiquidityPair
  deleteLiquidityPairs(
    where: [LiquidityPairWhereUniqueInput!]!
  ): [LiquidityPair]
  createNetwork(data: NetworkCreateInput!): Network
  createNetworks(data: [NetworkCreateInput!]!): [Network]
  updateNetwork(
    where: NetworkWhereUniqueInput!
    data: NetworkUpdateInput!
  ): Network
  updateNetworks(data: [NetworkUpdateArgs!]!): [Network]
  deleteNetwork(where: NetworkWhereUniqueInput!): Network
  deleteNetworks(where: [NetworkWhereUniqueInput!]!): [Network]
  createExchange(data: ExchangeCreateInput!): Exchange
  createExchanges(data: [ExchangeCreateInput!]!): [Exchange]
  updateExchange(
    where: ExchangeWhereUniqueInput!
    data: ExchangeUpdateInput!
  ): Exchange
  updateExchanges(data: [ExchangeUpdateArgs!]!): [Exchange]
  deleteExchange(where: ExchangeWhereUniqueInput!): Exchange
  deleteExchanges(where: [ExchangeWhereUniqueInput!]!): [Exchange]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createDiscordBot(data: DiscordBotCreateInput!): DiscordBot
  createDiscordBots(data: [DiscordBotCreateInput!]!): [DiscordBot]
  updateDiscordBot(
    where: DiscordBotWhereUniqueInput!
    data: DiscordBotUpdateInput!
  ): DiscordBot
  updateDiscordBots(data: [DiscordBotUpdateArgs!]!): [DiscordBot]
  deleteDiscordBot(where: DiscordBotWhereUniqueInput!): DiscordBot
  deleteDiscordBots(where: [DiscordBotWhereUniqueInput!]!): [DiscordBot]
  createRoadmap(data: RoadmapCreateInput!): Roadmap
  createRoadmaps(data: [RoadmapCreateInput!]!): [Roadmap]
  updateRoadmap(
    where: RoadmapWhereUniqueInput!
    data: RoadmapUpdateInput!
  ): Roadmap
  updateRoadmaps(data: [RoadmapUpdateArgs!]!): [Roadmap]
  deleteRoadmap(where: RoadmapWhereUniqueInput!): Roadmap
  deleteRoadmaps(where: [RoadmapWhereUniqueInput!]!): [Roadmap]
  createContent(data: ContentCreateInput!): Content
  createContents(data: [ContentCreateInput!]!): [Content]
  updateContent(
    where: ContentWhereUniqueInput!
    data: ContentUpdateInput!
  ): Content
  updateContents(data: [ContentUpdateArgs!]!): [Content]
  deleteContent(where: ContentWhereUniqueInput!): Content
  deleteContents(where: [ContentWhereUniqueInput!]!): [Content]
  createContentBlock(data: ContentBlockCreateInput!): ContentBlock
  createContentBlocks(data: [ContentBlockCreateInput!]!): [ContentBlock]
  updateContentBlock(
    where: ContentBlockWhereUniqueInput!
    data: ContentBlockUpdateInput!
  ): ContentBlock
  updateContentBlocks(data: [ContentBlockUpdateArgs!]!): [ContentBlock]
  deleteContentBlock(where: ContentBlockWhereUniqueInput!): ContentBlock
  deleteContentBlocks(where: [ContentBlockWhereUniqueInput!]!): [ContentBlock]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  marketStats(
    where: MarketStatWhereInput! = {}
    orderBy: [MarketStatOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MarketStat!]
  marketStat(where: MarketStatWhereUniqueInput!): MarketStat
  marketStatsCount(where: MarketStatWhereInput! = {}): Int
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  tokens(
    where: TokenWhereInput! = {}
    orderBy: [TokenOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Token!]
  token(where: TokenWhereUniqueInput!): Token
  tokensCount(where: TokenWhereInput! = {}): Int
  stableLiquidityPairs(
    where: StableLiquidityPairWhereInput! = {}
    orderBy: [StableLiquidityPairOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StableLiquidityPair!]
  stableLiquidityPair(
    where: StableLiquidityPairWhereUniqueInput!
  ): StableLiquidityPair
  stableLiquidityPairsCount(where: StableLiquidityPairWhereInput! = {}): Int
  liquidityPairs(
    where: LiquidityPairWhereInput! = {}
    orderBy: [LiquidityPairOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LiquidityPair!]
  liquidityPair(where: LiquidityPairWhereUniqueInput!): LiquidityPair
  liquidityPairsCount(where: LiquidityPairWhereInput! = {}): Int
  networks(
    where: NetworkWhereInput! = {}
    orderBy: [NetworkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Network!]
  network(where: NetworkWhereUniqueInput!): Network
  networksCount(where: NetworkWhereInput! = {}): Int
  exchanges(
    where: ExchangeWhereInput! = {}
    orderBy: [ExchangeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Exchange!]
  exchange(where: ExchangeWhereUniqueInput!): Exchange
  exchangesCount(where: ExchangeWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  discordBots(
    where: DiscordBotWhereInput! = {}
    orderBy: [DiscordBotOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscordBot!]
  discordBot(where: DiscordBotWhereUniqueInput!): DiscordBot
  discordBotsCount(where: DiscordBotWhereInput! = {}): Int
  roadmaps(
    where: RoadmapWhereInput! = {}
    orderBy: [RoadmapOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Roadmap!]
  roadmap(where: RoadmapWhereUniqueInput!): Roadmap
  roadmapsCount(where: RoadmapWhereInput! = {}): Int
  contents(
    where: ContentWhereInput! = {}
    orderBy: [ContentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Content!]
  content(where: ContentWhereUniqueInput!): Content
  contentsCount(where: ContentWhereInput! = {}): Int
  contentBlocks(
    where: ContentBlockWhereInput! = {}
    orderBy: [ContentBlockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ContentBlock!]
  contentBlock(where: ContentBlockWhereUniqueInput!): ContentBlock
  contentBlocksCount(where: ContentBlockWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
