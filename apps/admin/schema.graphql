# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  firstName: String
  lastName: String
  email: String
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
  password: PasswordState
  isAdmin: Boolean
  isSubscribedToEmail: Boolean
  isNotChargeable: Boolean
  isVerified: Boolean
  subscribedTill: DateTime
  referrer: String
  referralCode: String
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  payments(
    where: PaymentWhereInput! = {}
    orderBy: [PaymentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  dateCreated: DateTime
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  roles: RoleManyRelationFilter
  isAdmin: BooleanFilter
  isSubscribedToEmail: BooleanFilter
  isNotChargeable: BooleanFilter
  isVerified: BooleanFilter
  subscribedTill: DateTimeNullableFilter
  referrer: StringFilter
  referralCode: StringFilter
  projects: ProjectManyRelationFilter
  payments: PaymentManyRelationFilter
  dateCreated: DateTimeNullableFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input RoleManyRelationFilter {
  every: RoleWhereInput
  some: RoleWhereInput
  none: RoleWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ProjectManyRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input PaymentManyRelationFilter {
  every: PaymentWhereInput
  some: PaymentWhereInput
  none: PaymentWhereInput
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  isSubscribedToEmail: OrderDirection
  isNotChargeable: OrderDirection
  isVerified: OrderDirection
  subscribedTill: OrderDirection
  referrer: OrderDirection
  referralCode: OrderDirection
  dateCreated: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  firstName: String
  lastName: String
  email: String
  roles: RoleRelateToManyForUpdateInput
  password: String
  isAdmin: Boolean
  isSubscribedToEmail: Boolean
  isNotChargeable: Boolean
  isVerified: Boolean
  subscribedTill: DateTime
  referrer: String
  referralCode: String
  projects: ProjectRelateToManyForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
  dateCreated: DateTime
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input RoleRelateToManyForUpdateInput {
  disconnect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input ProjectRelateToManyForUpdateInput {
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input PaymentRelateToManyForUpdateInput {
  disconnect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  firstName: String
  lastName: String
  email: String
  roles: RoleRelateToManyForCreateInput
  password: String
  isAdmin: Boolean
  isSubscribedToEmail: Boolean
  isNotChargeable: Boolean
  isVerified: Boolean
  subscribedTill: DateTime
  referrer: String
  referralCode: String
  projects: ProjectRelateToManyForCreateInput
  payments: PaymentRelateToManyForCreateInput
  dateCreated: DateTime
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input RoleRelateToManyForCreateInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input ProjectRelateToManyForCreateInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input PaymentRelateToManyForCreateInput {
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

type Payment {
  id: ID!
  name: String
  description: String
  quantity: Float
  price: Float
  discount: Float
  tax: Float
  amount: Float
  billedTo: User
  paymentMethod: String
  paymentAddress: String
  status: String
  invoiceUrl: String
  dateIssued: DateTime
  datePaid: DateTime
}

input PaymentWhereUniqueInput {
  id: ID
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  quantity: FloatFilter
  price: FloatFilter
  discount: FloatNullableFilter
  tax: FloatNullableFilter
  amount: FloatFilter
  billedTo: UserWhereInput
  paymentMethod: StringFilter
  paymentAddress: StringFilter
  status: StringNullableFilter
  invoiceUrl: StringFilter
  dateIssued: DateTimeNullableFilter
  datePaid: DateTimeNullableFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PaymentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  quantity: OrderDirection
  price: OrderDirection
  discount: OrderDirection
  tax: OrderDirection
  amount: OrderDirection
  paymentMethod: OrderDirection
  paymentAddress: OrderDirection
  status: OrderDirection
  invoiceUrl: OrderDirection
  dateIssued: OrderDirection
  datePaid: OrderDirection
}

input PaymentUpdateInput {
  name: String
  description: String
  quantity: Float
  price: Float
  discount: Float
  tax: Float
  amount: Float
  billedTo: UserRelateToOneForUpdateInput
  paymentMethod: String
  paymentAddress: String
  status: String
  invoiceUrl: String
  dateIssued: DateTime
  datePaid: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  name: String
  description: String
  quantity: Float
  price: Float
  discount: Float
  tax: Float
  amount: Float
  billedTo: UserRelateToOneForCreateInput
  paymentMethod: String
  paymentAddress: String
  status: String
  invoiceUrl: String
  dateIssued: DateTime
  datePaid: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Role {
  id: ID!
  name: String
  slug: String
  isAdmin: Boolean
  isModerator: Boolean
  isEditor: Boolean
  isProjectOwner: Boolean
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  dateAdded: DateTime
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  isAdmin: BooleanFilter
  isModerator: BooleanFilter
  isEditor: BooleanFilter
  isProjectOwner: BooleanFilter
  users: UserManyRelationFilter
  dateAdded: DateTimeNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  isAdmin: OrderDirection
  isModerator: OrderDirection
  isEditor: OrderDirection
  isProjectOwner: OrderDirection
  dateAdded: OrderDirection
}

input RoleUpdateInput {
  name: String
  slug: String
  isAdmin: Boolean
  isModerator: Boolean
  isEditor: Boolean
  isProjectOwner: Boolean
  users: UserRelateToManyForUpdateInput
  dateAdded: DateTime
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  slug: String
  isAdmin: Boolean
  isModerator: Boolean
  isEditor: Boolean
  isProjectOwner: Boolean
  users: UserRelateToManyForCreateInput
  dateAdded: DateTime
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Project {
  id: ID!
  name: String
  slug: String
  logo: ImageFieldOutput
  enabled: Boolean
  isListed: Boolean
  trackData: Boolean
  trackHolders: Boolean
  isRebasing: Boolean
  initialized: Boolean
  markForDeletion: Boolean
  status: String
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  contractAddress: String
  pairAddress: String
  burnAddress: String
  liquidityPair(
    where: LiquidityPairWhereInput! = {}
    orderBy: [LiquidityPairOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LiquidityPair!]
  liquidityPairCount(where: LiquidityPairWhereInput! = {}): Int
  network: Network
  trackHoldersFromTokenAmount: Float
  description: String
  launchDate: DateTime
  launchBlock: Int
  user: User
  notifications(
    where: NotificationWhereInput! = {}
    orderBy: [NotificationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Notification!]
  notificationsCount(where: NotificationWhereInput! = {}): Int
  ABI: JSON
  customData: JSON
  sellTax: Float
  buyTax: Float
  rebasePeriod: String
  apy: Float
  dailyApy: Float
  calendar: String
  website: String
  whitepaper: String
  twitter: String
  telegram: String
  discord: String
  reddit: String
  youtube: String
  github: String
  medium: String
  dateAdded: DateTime
  holders(
    where: HolderWhereInput! = {}
    orderBy: [HolderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Holder!]
  holdersCount(where: HolderWhereInput! = {}): Int
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  enabled: BooleanFilter
  isListed: BooleanFilter
  trackData: BooleanFilter
  trackHolders: BooleanFilter
  isRebasing: BooleanFilter
  initialized: BooleanFilter
  markForDeletion: BooleanFilter
  status: StringNullableFilter
  tags: TagManyRelationFilter
  contractAddress: StringFilter
  pairAddress: StringFilter
  burnAddress: StringFilter
  liquidityPair: LiquidityPairManyRelationFilter
  network: NetworkWhereInput
  trackHoldersFromTokenAmount: FloatNullableFilter
  description: StringFilter
  launchDate: DateTimeNullableFilter
  launchBlock: IntNullableFilter
  user: UserWhereInput
  notifications: NotificationManyRelationFilter
  sellTax: FloatNullableFilter
  buyTax: FloatNullableFilter
  rebasePeriod: StringFilter
  apy: FloatNullableFilter
  dailyApy: FloatNullableFilter
  calendar: StringFilter
  website: StringFilter
  whitepaper: StringFilter
  twitter: StringFilter
  telegram: StringFilter
  discord: StringFilter
  reddit: StringFilter
  youtube: StringFilter
  github: StringFilter
  medium: StringFilter
  dateAdded: DateTimeNullableFilter
  holders: HolderManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input LiquidityPairManyRelationFilter {
  every: LiquidityPairWhereInput
  some: LiquidityPairWhereInput
  none: LiquidityPairWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input NotificationManyRelationFilter {
  every: NotificationWhereInput
  some: NotificationWhereInput
  none: NotificationWhereInput
}

input HolderManyRelationFilter {
  every: HolderWhereInput
  some: HolderWhereInput
  none: HolderWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  enabled: OrderDirection
  isListed: OrderDirection
  trackData: OrderDirection
  trackHolders: OrderDirection
  isRebasing: OrderDirection
  initialized: OrderDirection
  markForDeletion: OrderDirection
  status: OrderDirection
  contractAddress: OrderDirection
  pairAddress: OrderDirection
  burnAddress: OrderDirection
  trackHoldersFromTokenAmount: OrderDirection
  description: OrderDirection
  launchDate: OrderDirection
  launchBlock: OrderDirection
  sellTax: OrderDirection
  buyTax: OrderDirection
  rebasePeriod: OrderDirection
  apy: OrderDirection
  dailyApy: OrderDirection
  calendar: OrderDirection
  website: OrderDirection
  whitepaper: OrderDirection
  twitter: OrderDirection
  telegram: OrderDirection
  discord: OrderDirection
  reddit: OrderDirection
  youtube: OrderDirection
  github: OrderDirection
  medium: OrderDirection
  dateAdded: OrderDirection
}

input ProjectUpdateInput {
  name: String
  slug: String
  logo: ImageFieldInput
  enabled: Boolean
  isListed: Boolean
  trackData: Boolean
  trackHolders: Boolean
  isRebasing: Boolean
  initialized: Boolean
  markForDeletion: Boolean
  status: String
  tags: TagRelateToManyForUpdateInput
  contractAddress: String
  pairAddress: String
  burnAddress: String
  liquidityPair: LiquidityPairRelateToManyForUpdateInput
  network: NetworkRelateToOneForUpdateInput
  trackHoldersFromTokenAmount: Float
  description: String
  launchDate: DateTime
  launchBlock: Int
  user: UserRelateToOneForUpdateInput
  notifications: NotificationRelateToManyForUpdateInput
  ABI: JSON
  customData: JSON
  sellTax: Float
  buyTax: Float
  rebasePeriod: String
  apy: Float
  dailyApy: Float
  calendar: String
  website: String
  whitepaper: String
  twitter: String
  telegram: String
  discord: String
  reddit: String
  youtube: String
  github: String
  medium: String
  dateAdded: DateTime
  holders: HolderRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input LiquidityPairRelateToManyForUpdateInput {
  disconnect: [LiquidityPairWhereUniqueInput!]
  set: [LiquidityPairWhereUniqueInput!]
  create: [LiquidityPairCreateInput!]
  connect: [LiquidityPairWhereUniqueInput!]
}

input NetworkRelateToOneForUpdateInput {
  create: NetworkCreateInput
  connect: NetworkWhereUniqueInput
  disconnect: Boolean
}

input NotificationRelateToManyForUpdateInput {
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  create: [NotificationCreateInput!]
  connect: [NotificationWhereUniqueInput!]
}

input HolderRelateToManyForUpdateInput {
  disconnect: [HolderWhereUniqueInput!]
  set: [HolderWhereUniqueInput!]
  create: [HolderCreateInput!]
  connect: [HolderWhereUniqueInput!]
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  name: String
  slug: String
  logo: ImageFieldInput
  enabled: Boolean
  isListed: Boolean
  trackData: Boolean
  trackHolders: Boolean
  isRebasing: Boolean
  initialized: Boolean
  markForDeletion: Boolean
  status: String
  tags: TagRelateToManyForCreateInput
  contractAddress: String
  pairAddress: String
  burnAddress: String
  liquidityPair: LiquidityPairRelateToManyForCreateInput
  network: NetworkRelateToOneForCreateInput
  trackHoldersFromTokenAmount: Float
  description: String
  launchDate: DateTime
  launchBlock: Int
  user: UserRelateToOneForCreateInput
  notifications: NotificationRelateToManyForCreateInput
  ABI: JSON
  customData: JSON
  sellTax: Float
  buyTax: Float
  rebasePeriod: String
  apy: Float
  dailyApy: Float
  calendar: String
  website: String
  whitepaper: String
  twitter: String
  telegram: String
  discord: String
  reddit: String
  youtube: String
  github: String
  medium: String
  dateAdded: DateTime
  holders: HolderRelateToManyForCreateInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input LiquidityPairRelateToManyForCreateInput {
  create: [LiquidityPairCreateInput!]
  connect: [LiquidityPairWhereUniqueInput!]
}

input NetworkRelateToOneForCreateInput {
  create: NetworkCreateInput
  connect: NetworkWhereUniqueInput
}

input NotificationRelateToManyForCreateInput {
  create: [NotificationCreateInput!]
  connect: [NotificationWhereUniqueInput!]
}

input HolderRelateToManyForCreateInput {
  create: [HolderCreateInput!]
  connect: [HolderWhereUniqueInput!]
}

type Notification {
  id: ID!
  title: String
  enabled: Boolean
  content: String
  type: String
  project: Project
  dateAdded: DateTime
}

input NotificationWhereUniqueInput {
  id: ID
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  id: IDFilter
  title: StringFilter
  enabled: BooleanFilter
  content: StringFilter
  type: StringNullableFilter
  project: ProjectWhereInput
  dateAdded: DateTimeNullableFilter
}

input NotificationOrderByInput {
  id: OrderDirection
  title: OrderDirection
  enabled: OrderDirection
  content: OrderDirection
  type: OrderDirection
  dateAdded: OrderDirection
}

input NotificationUpdateInput {
  title: String
  enabled: Boolean
  content: String
  type: String
  project: ProjectRelateToOneForUpdateInput
  dateAdded: DateTime
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input NotificationUpdateArgs {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateInput!
}

input NotificationCreateInput {
  title: String
  enabled: Boolean
  content: String
  type: String
  project: ProjectRelateToOneForCreateInput
  dateAdded: DateTime
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

type MarketStat {
  id: ID!
  price: Float
  marketCap: Float
  totalSupply: Float
  liquidity: Float
  pairPrice: Float
  holders: Float
  avgHoldings: Float
  newHolders: Float
  leavingHolders: Float
  recurringHolders: Float
  customData: JSON
  project: Project
  dateAdded: DateTime
}

input MarketStatWhereUniqueInput {
  id: ID
}

input MarketStatWhereInput {
  AND: [MarketStatWhereInput!]
  OR: [MarketStatWhereInput!]
  NOT: [MarketStatWhereInput!]
  id: IDFilter
  price: FloatNullableFilter
  marketCap: FloatNullableFilter
  totalSupply: FloatNullableFilter
  liquidity: FloatNullableFilter
  pairPrice: FloatNullableFilter
  holders: FloatNullableFilter
  avgHoldings: FloatNullableFilter
  newHolders: FloatNullableFilter
  leavingHolders: FloatNullableFilter
  recurringHolders: FloatNullableFilter
  project: ProjectWhereInput
  dateAdded: DateTimeNullableFilter
}

input MarketStatOrderByInput {
  id: OrderDirection
  price: OrderDirection
  marketCap: OrderDirection
  totalSupply: OrderDirection
  liquidity: OrderDirection
  pairPrice: OrderDirection
  holders: OrderDirection
  avgHoldings: OrderDirection
  newHolders: OrderDirection
  leavingHolders: OrderDirection
  recurringHolders: OrderDirection
  dateAdded: OrderDirection
}

input MarketStatUpdateInput {
  price: Float
  marketCap: Float
  totalSupply: Float
  liquidity: Float
  pairPrice: Float
  holders: Float
  avgHoldings: Float
  newHolders: Float
  leavingHolders: Float
  recurringHolders: Float
  customData: JSON
  project: ProjectRelateToOneForUpdateInput
  dateAdded: DateTime
}

input MarketStatUpdateArgs {
  where: MarketStatWhereUniqueInput!
  data: MarketStatUpdateInput!
}

input MarketStatCreateInput {
  price: Float
  marketCap: Float
  totalSupply: Float
  liquidity: Float
  pairPrice: Float
  holders: Float
  avgHoldings: Float
  newHolders: Float
  leavingHolders: Float
  recurringHolders: Float
  customData: JSON
  project: ProjectRelateToOneForCreateInput
  dateAdded: DateTime
}

type LiquidityPair {
  id: ID!
  name: String
  address: String
  tokenAddress: String
  stablePair: StableLiquidityPair
  network: Network
  project: Project
  exchange: Exchange
  dateAdded: DateTime
}

input LiquidityPairWhereUniqueInput {
  id: ID
}

input LiquidityPairWhereInput {
  AND: [LiquidityPairWhereInput!]
  OR: [LiquidityPairWhereInput!]
  NOT: [LiquidityPairWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  tokenAddress: StringFilter
  stablePair: StableLiquidityPairWhereInput
  network: NetworkWhereInput
  project: ProjectWhereInput
  exchange: ExchangeWhereInput
  dateAdded: DateTimeNullableFilter
}

input LiquidityPairOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
  tokenAddress: OrderDirection
  dateAdded: OrderDirection
}

input LiquidityPairUpdateInput {
  name: String
  address: String
  tokenAddress: String
  stablePair: StableLiquidityPairRelateToOneForUpdateInput
  network: NetworkRelateToOneForUpdateInput
  project: ProjectRelateToOneForUpdateInput
  exchange: ExchangeRelateToOneForUpdateInput
  dateAdded: DateTime
}

input StableLiquidityPairRelateToOneForUpdateInput {
  create: StableLiquidityPairCreateInput
  connect: StableLiquidityPairWhereUniqueInput
  disconnect: Boolean
}

input ExchangeRelateToOneForUpdateInput {
  create: ExchangeCreateInput
  connect: ExchangeWhereUniqueInput
  disconnect: Boolean
}

input LiquidityPairUpdateArgs {
  where: LiquidityPairWhereUniqueInput!
  data: LiquidityPairUpdateInput!
}

input LiquidityPairCreateInput {
  name: String
  address: String
  tokenAddress: String
  stablePair: StableLiquidityPairRelateToOneForCreateInput
  network: NetworkRelateToOneForCreateInput
  project: ProjectRelateToOneForCreateInput
  exchange: ExchangeRelateToOneForCreateInput
  dateAdded: DateTime
}

input StableLiquidityPairRelateToOneForCreateInput {
  create: StableLiquidityPairCreateInput
  connect: StableLiquidityPairWhereUniqueInput
}

input ExchangeRelateToOneForCreateInput {
  create: ExchangeCreateInput
  connect: ExchangeWhereUniqueInput
}

type Tag {
  id: ID!
  name: String
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  dateAdded: DateTime
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  projects: ProjectManyRelationFilter
  dateAdded: DateTimeNullableFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  dateAdded: OrderDirection
}

input TagUpdateInput {
  name: String
  projects: ProjectRelateToManyForUpdateInput
  dateAdded: DateTime
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  projects: ProjectRelateToManyForCreateInput
  dateAdded: DateTime
}

type Exchange {
  id: ID!
  name: String
  logo: ImageFieldOutput
  url: String
  tradeUrl: String
  dateAdded: DateTime
}

input ExchangeWhereUniqueInput {
  id: ID
}

input ExchangeWhereInput {
  AND: [ExchangeWhereInput!]
  OR: [ExchangeWhereInput!]
  NOT: [ExchangeWhereInput!]
  id: IDFilter
  name: StringFilter
  url: StringFilter
  tradeUrl: StringFilter
  dateAdded: DateTimeNullableFilter
}

input ExchangeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  url: OrderDirection
  tradeUrl: OrderDirection
  dateAdded: OrderDirection
}

input ExchangeUpdateInput {
  name: String
  logo: ImageFieldInput
  url: String
  tradeUrl: String
  dateAdded: DateTime
}

input ExchangeUpdateArgs {
  where: ExchangeWhereUniqueInput!
  data: ExchangeUpdateInput!
}

input ExchangeCreateInput {
  name: String
  logo: ImageFieldInput
  url: String
  tradeUrl: String
  dateAdded: DateTime
}

type Token {
  id: ID!
  name: String
  address: String
  ABI: JSON
  network: Network
  dateAdded: DateTime
}

input TokenWhereUniqueInput {
  id: ID
}

input TokenWhereInput {
  AND: [TokenWhereInput!]
  OR: [TokenWhereInput!]
  NOT: [TokenWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  network: NetworkWhereInput
  dateAdded: DateTimeNullableFilter
}

input TokenOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
  dateAdded: OrderDirection
}

input TokenUpdateInput {
  name: String
  address: String
  ABI: JSON
  network: NetworkRelateToOneForUpdateInput
  dateAdded: DateTime
}

input TokenUpdateArgs {
  where: TokenWhereUniqueInput!
  data: TokenUpdateInput!
}

input TokenCreateInput {
  name: String
  address: String
  ABI: JSON
  network: NetworkRelateToOneForCreateInput
  dateAdded: DateTime
}

type Network {
  id: ID!
  name: String
  slug: String
  logo: ImageFieldOutput
  url: String
  scanner: String
  tokenScanner: String
  dateAdded: DateTime
}

input NetworkWhereUniqueInput {
  id: ID
}

input NetworkWhereInput {
  AND: [NetworkWhereInput!]
  OR: [NetworkWhereInput!]
  NOT: [NetworkWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  url: StringFilter
  scanner: StringFilter
  tokenScanner: StringFilter
  dateAdded: DateTimeNullableFilter
}

input NetworkOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  url: OrderDirection
  scanner: OrderDirection
  tokenScanner: OrderDirection
  dateAdded: OrderDirection
}

input NetworkUpdateInput {
  name: String
  slug: String
  logo: ImageFieldInput
  url: String
  scanner: String
  tokenScanner: String
  dateAdded: DateTime
}

input NetworkUpdateArgs {
  where: NetworkWhereUniqueInput!
  data: NetworkUpdateInput!
}

input NetworkCreateInput {
  name: String
  slug: String
  logo: ImageFieldInput
  url: String
  scanner: String
  tokenScanner: String
  dateAdded: DateTime
}

type StableLiquidityPair {
  id: ID!
  name: String
  address: String
  pairToken(
    where: TokenWhereInput! = {}
    orderBy: [TokenOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Token!]
  pairTokenCount(where: TokenWhereInput! = {}): Int
  network: Network
  dateAdded: DateTime
}

input StableLiquidityPairWhereUniqueInput {
  id: ID
}

input StableLiquidityPairWhereInput {
  AND: [StableLiquidityPairWhereInput!]
  OR: [StableLiquidityPairWhereInput!]
  NOT: [StableLiquidityPairWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  pairToken: TokenManyRelationFilter
  network: NetworkWhereInput
  dateAdded: DateTimeNullableFilter
}

input TokenManyRelationFilter {
  every: TokenWhereInput
  some: TokenWhereInput
  none: TokenWhereInput
}

input StableLiquidityPairOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
  dateAdded: OrderDirection
}

input StableLiquidityPairUpdateInput {
  name: String
  address: String
  pairToken: TokenRelateToManyForUpdateInput
  network: NetworkRelateToOneForUpdateInput
  dateAdded: DateTime
}

input TokenRelateToManyForUpdateInput {
  disconnect: [TokenWhereUniqueInput!]
  set: [TokenWhereUniqueInput!]
  create: [TokenCreateInput!]
  connect: [TokenWhereUniqueInput!]
}

input StableLiquidityPairUpdateArgs {
  where: StableLiquidityPairWhereUniqueInput!
  data: StableLiquidityPairUpdateInput!
}

input StableLiquidityPairCreateInput {
  name: String
  address: String
  pairToken: TokenRelateToManyForCreateInput
  network: NetworkRelateToOneForCreateInput
  dateAdded: DateTime
}

input TokenRelateToManyForCreateInput {
  create: [TokenCreateInput!]
  connect: [TokenWhereUniqueInput!]
}

type DiscordBot {
  id: ID!
  name: String
  enabled: Boolean
  presence: String
  botId: String
  apiKey: String
  tracking: String
  customTracking: String
  project: Project
  dateAdded: DateTime
}

input DiscordBotWhereUniqueInput {
  id: ID
}

input DiscordBotWhereInput {
  AND: [DiscordBotWhereInput!]
  OR: [DiscordBotWhereInput!]
  NOT: [DiscordBotWhereInput!]
  id: IDFilter
  name: StringFilter
  enabled: BooleanFilter
  presence: StringFilter
  botId: StringFilter
  apiKey: StringFilter
  tracking: StringNullableFilter
  customTracking: StringFilter
  project: ProjectWhereInput
  dateAdded: DateTimeNullableFilter
}

input DiscordBotOrderByInput {
  id: OrderDirection
  name: OrderDirection
  enabled: OrderDirection
  presence: OrderDirection
  botId: OrderDirection
  apiKey: OrderDirection
  tracking: OrderDirection
  customTracking: OrderDirection
  dateAdded: OrderDirection
}

input DiscordBotUpdateInput {
  name: String
  enabled: Boolean
  presence: String
  botId: String
  apiKey: String
  tracking: String
  customTracking: String
  project: ProjectRelateToOneForUpdateInput
  dateAdded: DateTime
}

input DiscordBotUpdateArgs {
  where: DiscordBotWhereUniqueInput!
  data: DiscordBotUpdateInput!
}

input DiscordBotCreateInput {
  name: String
  enabled: Boolean
  presence: String
  botId: String
  apiKey: String
  tracking: String
  customTracking: String
  project: ProjectRelateToOneForCreateInput
  dateAdded: DateTime
}

type Content {
  id: ID!
  title: String
  slug: String
  image: ImageFieldOutput
  contentType: ContentType
  enabled: Boolean
  summary: String
  content: Content_content_Document
  blockName: ContentBlock
  dateAdded: DateTime
}

type Content_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ContentWhereUniqueInput {
  id: ID
}

input ContentWhereInput {
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  contentType: ContentTypeWhereInput
  enabled: BooleanFilter
  summary: StringFilter
  blockName: ContentBlockWhereInput
  dateAdded: DateTimeNullableFilter
}

input ContentOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  enabled: OrderDirection
  summary: OrderDirection
  dateAdded: OrderDirection
}

input ContentUpdateInput {
  title: String
  slug: String
  image: ImageFieldInput
  contentType: ContentTypeRelateToOneForUpdateInput
  enabled: Boolean
  summary: String
  content: JSON
  blockName: ContentBlockRelateToOneForUpdateInput
  dateAdded: DateTime
}

input ContentTypeRelateToOneForUpdateInput {
  create: ContentTypeCreateInput
  connect: ContentTypeWhereUniqueInput
  disconnect: Boolean
}

input ContentBlockRelateToOneForUpdateInput {
  create: ContentBlockCreateInput
  connect: ContentBlockWhereUniqueInput
  disconnect: Boolean
}

input ContentUpdateArgs {
  where: ContentWhereUniqueInput!
  data: ContentUpdateInput!
}

input ContentCreateInput {
  title: String
  slug: String
  image: ImageFieldInput
  contentType: ContentTypeRelateToOneForCreateInput
  enabled: Boolean
  summary: String
  content: JSON
  blockName: ContentBlockRelateToOneForCreateInput
  dateAdded: DateTime
}

input ContentTypeRelateToOneForCreateInput {
  create: ContentTypeCreateInput
  connect: ContentTypeWhereUniqueInput
}

input ContentBlockRelateToOneForCreateInput {
  create: ContentBlockCreateInput
  connect: ContentBlockWhereUniqueInput
}

type ContentBlock {
  id: ID!
  title: String
  blockName: String
  enabled: Boolean
  dateAdded: DateTime
}

input ContentBlockWhereUniqueInput {
  id: ID
}

input ContentBlockWhereInput {
  AND: [ContentBlockWhereInput!]
  OR: [ContentBlockWhereInput!]
  NOT: [ContentBlockWhereInput!]
  id: IDFilter
  title: StringFilter
  blockName: StringFilter
  enabled: BooleanFilter
  dateAdded: DateTimeNullableFilter
}

input ContentBlockOrderByInput {
  id: OrderDirection
  title: OrderDirection
  blockName: OrderDirection
  enabled: OrderDirection
  dateAdded: OrderDirection
}

input ContentBlockUpdateInput {
  title: String
  blockName: String
  enabled: Boolean
  dateAdded: DateTime
}

input ContentBlockUpdateArgs {
  where: ContentBlockWhereUniqueInput!
  data: ContentBlockUpdateInput!
}

input ContentBlockCreateInput {
  title: String
  blockName: String
  enabled: Boolean
  dateAdded: DateTime
}

type ContentType {
  id: ID!
  title: String
  typeName: String
  dateAdded: DateTime
}

input ContentTypeWhereUniqueInput {
  id: ID
}

input ContentTypeWhereInput {
  AND: [ContentTypeWhereInput!]
  OR: [ContentTypeWhereInput!]
  NOT: [ContentTypeWhereInput!]
  id: IDFilter
  title: StringFilter
  typeName: StringFilter
  dateAdded: DateTimeNullableFilter
}

input ContentTypeOrderByInput {
  id: OrderDirection
  title: OrderDirection
  typeName: OrderDirection
  dateAdded: OrderDirection
}

input ContentTypeUpdateInput {
  title: String
  typeName: String
  dateAdded: DateTime
}

input ContentTypeUpdateArgs {
  where: ContentTypeWhereUniqueInput!
  data: ContentTypeUpdateInput!
}

input ContentTypeCreateInput {
  title: String
  typeName: String
  dateAdded: DateTime
}

type Image {
  id: ID!
  title: String
  slug: String
  image: ImageFieldOutput
  enabled: Boolean
  dateAdded: DateTime
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  enabled: BooleanFilter
  dateAdded: DateTimeNullableFilter
}

input ImageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  enabled: OrderDirection
  dateAdded: OrderDirection
}

input ImageUpdateInput {
  title: String
  slug: String
  image: ImageFieldInput
  enabled: Boolean
  dateAdded: DateTime
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  title: String
  slug: String
  image: ImageFieldInput
  enabled: Boolean
  dateAdded: DateTime
}

type Block {
  id: ID!
  project: Project
  firstBlock: Int
  previousBlock: Int
  lastBlock: Int
  dateAdded: DateTime
  updatedAt: DateTime
}

input BlockWhereUniqueInput {
  id: ID
}

input BlockWhereInput {
  AND: [BlockWhereInput!]
  OR: [BlockWhereInput!]
  NOT: [BlockWhereInput!]
  id: IDFilter
  project: ProjectWhereInput
  firstBlock: IntNullableFilter
  previousBlock: IntNullableFilter
  lastBlock: IntNullableFilter
  dateAdded: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input BlockOrderByInput {
  id: OrderDirection
  firstBlock: OrderDirection
  previousBlock: OrderDirection
  lastBlock: OrderDirection
  dateAdded: OrderDirection
  updatedAt: OrderDirection
}

input BlockUpdateInput {
  project: ProjectRelateToOneForUpdateInput
  firstBlock: Int
  previousBlock: Int
  lastBlock: Int
  dateAdded: DateTime
  updatedAt: DateTime
}

input BlockUpdateArgs {
  where: BlockWhereUniqueInput!
  data: BlockUpdateInput!
}

input BlockCreateInput {
  project: ProjectRelateToOneForCreateInput
  firstBlock: Int
  previousBlock: Int
  lastBlock: Int
  dateAdded: DateTime
  updatedAt: DateTime
}

type Transfer {
  id: ID!
  project: Project
  amount: Float
  type: Int
  address: String
  fromAddress: String
  toAddress: String
  hash: String
  block: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input TransferWhereUniqueInput {
  id: ID
}

input TransferWhereInput {
  AND: [TransferWhereInput!]
  OR: [TransferWhereInput!]
  NOT: [TransferWhereInput!]
  id: IDFilter
  project: ProjectWhereInput
  amount: FloatNullableFilter
  type: IntNullableFilter
  address: StringFilter
  fromAddress: StringFilter
  toAddress: StringFilter
  hash: StringFilter
  block: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TransferOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  type: OrderDirection
  address: OrderDirection
  fromAddress: OrderDirection
  toAddress: OrderDirection
  hash: OrderDirection
  block: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TransferUpdateInput {
  project: ProjectRelateToOneForUpdateInput
  amount: Float
  type: Int
  address: String
  fromAddress: String
  toAddress: String
  hash: String
  block: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input TransferUpdateArgs {
  where: TransferWhereUniqueInput!
  data: TransferUpdateInput!
}

input TransferCreateInput {
  project: ProjectRelateToOneForCreateInput
  amount: Float
  type: Int
  address: String
  fromAddress: String
  toAddress: String
  hash: String
  block: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type Holder {
  id: ID!
  address: String
  balance: Float
  note: String
  isContract: Boolean
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  transfers(
    where: TransferWhereInput! = {}
    orderBy: [TransferOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Transfer!]
  transfersCount(where: TransferWhereInput! = {}): Int
  dateAdded: DateTime
  updatedAt: DateTime
}

input HolderWhereUniqueInput {
  id: ID
}

input HolderWhereInput {
  AND: [HolderWhereInput!]
  OR: [HolderWhereInput!]
  NOT: [HolderWhereInput!]
  id: IDFilter
  address: StringFilter
  balance: FloatNullableFilter
  note: StringFilter
  isContract: BooleanFilter
  projects: ProjectManyRelationFilter
  transfers: TransferManyRelationFilter
  dateAdded: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TransferManyRelationFilter {
  every: TransferWhereInput
  some: TransferWhereInput
  none: TransferWhereInput
}

input HolderOrderByInput {
  id: OrderDirection
  address: OrderDirection
  balance: OrderDirection
  note: OrderDirection
  isContract: OrderDirection
  dateAdded: OrderDirection
  updatedAt: OrderDirection
}

input HolderUpdateInput {
  address: String
  balance: Float
  note: String
  isContract: Boolean
  projects: ProjectRelateToManyForUpdateInput
  transfers: TransferRelateToManyForUpdateInput
  dateAdded: DateTime
  updatedAt: DateTime
}

input TransferRelateToManyForUpdateInput {
  disconnect: [TransferWhereUniqueInput!]
  set: [TransferWhereUniqueInput!]
  create: [TransferCreateInput!]
  connect: [TransferWhereUniqueInput!]
}

input HolderUpdateArgs {
  where: HolderWhereUniqueInput!
  data: HolderUpdateInput!
}

input HolderCreateInput {
  address: String
  balance: Float
  note: String
  isContract: Boolean
  projects: ProjectRelateToManyForCreateInput
  transfers: TransferRelateToManyForCreateInput
  dateAdded: DateTime
  updatedAt: DateTime
}

input TransferRelateToManyForCreateInput {
  create: [TransferCreateInput!]
  connect: [TransferWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(
    where: PaymentWhereUniqueInput!
    data: PaymentUpdateInput!
  ): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(
    where: ProjectWhereUniqueInput!
    data: ProjectUpdateInput!
  ): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createNotification(data: NotificationCreateInput!): Notification
  createNotifications(data: [NotificationCreateInput!]!): [Notification]
  updateNotification(
    where: NotificationWhereUniqueInput!
    data: NotificationUpdateInput!
  ): Notification
  updateNotifications(data: [NotificationUpdateArgs!]!): [Notification]
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteNotifications(where: [NotificationWhereUniqueInput!]!): [Notification]
  createMarketStat(data: MarketStatCreateInput!): MarketStat
  createMarketStats(data: [MarketStatCreateInput!]!): [MarketStat]
  updateMarketStat(
    where: MarketStatWhereUniqueInput!
    data: MarketStatUpdateInput!
  ): MarketStat
  updateMarketStats(data: [MarketStatUpdateArgs!]!): [MarketStat]
  deleteMarketStat(where: MarketStatWhereUniqueInput!): MarketStat
  deleteMarketStats(where: [MarketStatWhereUniqueInput!]!): [MarketStat]
  createLiquidityPair(data: LiquidityPairCreateInput!): LiquidityPair
  createLiquidityPairs(data: [LiquidityPairCreateInput!]!): [LiquidityPair]
  updateLiquidityPair(
    where: LiquidityPairWhereUniqueInput!
    data: LiquidityPairUpdateInput!
  ): LiquidityPair
  updateLiquidityPairs(data: [LiquidityPairUpdateArgs!]!): [LiquidityPair]
  deleteLiquidityPair(where: LiquidityPairWhereUniqueInput!): LiquidityPair
  deleteLiquidityPairs(
    where: [LiquidityPairWhereUniqueInput!]!
  ): [LiquidityPair]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createExchange(data: ExchangeCreateInput!): Exchange
  createExchanges(data: [ExchangeCreateInput!]!): [Exchange]
  updateExchange(
    where: ExchangeWhereUniqueInput!
    data: ExchangeUpdateInput!
  ): Exchange
  updateExchanges(data: [ExchangeUpdateArgs!]!): [Exchange]
  deleteExchange(where: ExchangeWhereUniqueInput!): Exchange
  deleteExchanges(where: [ExchangeWhereUniqueInput!]!): [Exchange]
  createToken(data: TokenCreateInput!): Token
  createTokens(data: [TokenCreateInput!]!): [Token]
  updateToken(where: TokenWhereUniqueInput!, data: TokenUpdateInput!): Token
  updateTokens(data: [TokenUpdateArgs!]!): [Token]
  deleteToken(where: TokenWhereUniqueInput!): Token
  deleteTokens(where: [TokenWhereUniqueInput!]!): [Token]
  createNetwork(data: NetworkCreateInput!): Network
  createNetworks(data: [NetworkCreateInput!]!): [Network]
  updateNetwork(
    where: NetworkWhereUniqueInput!
    data: NetworkUpdateInput!
  ): Network
  updateNetworks(data: [NetworkUpdateArgs!]!): [Network]
  deleteNetwork(where: NetworkWhereUniqueInput!): Network
  deleteNetworks(where: [NetworkWhereUniqueInput!]!): [Network]
  createStableLiquidityPair(
    data: StableLiquidityPairCreateInput!
  ): StableLiquidityPair
  createStableLiquidityPairs(
    data: [StableLiquidityPairCreateInput!]!
  ): [StableLiquidityPair]
  updateStableLiquidityPair(
    where: StableLiquidityPairWhereUniqueInput!
    data: StableLiquidityPairUpdateInput!
  ): StableLiquidityPair
  updateStableLiquidityPairs(
    data: [StableLiquidityPairUpdateArgs!]!
  ): [StableLiquidityPair]
  deleteStableLiquidityPair(
    where: StableLiquidityPairWhereUniqueInput!
  ): StableLiquidityPair
  deleteStableLiquidityPairs(
    where: [StableLiquidityPairWhereUniqueInput!]!
  ): [StableLiquidityPair]
  createDiscordBot(data: DiscordBotCreateInput!): DiscordBot
  createDiscordBots(data: [DiscordBotCreateInput!]!): [DiscordBot]
  updateDiscordBot(
    where: DiscordBotWhereUniqueInput!
    data: DiscordBotUpdateInput!
  ): DiscordBot
  updateDiscordBots(data: [DiscordBotUpdateArgs!]!): [DiscordBot]
  deleteDiscordBot(where: DiscordBotWhereUniqueInput!): DiscordBot
  deleteDiscordBots(where: [DiscordBotWhereUniqueInput!]!): [DiscordBot]
  createContent(data: ContentCreateInput!): Content
  createContents(data: [ContentCreateInput!]!): [Content]
  updateContent(
    where: ContentWhereUniqueInput!
    data: ContentUpdateInput!
  ): Content
  updateContents(data: [ContentUpdateArgs!]!): [Content]
  deleteContent(where: ContentWhereUniqueInput!): Content
  deleteContents(where: [ContentWhereUniqueInput!]!): [Content]
  createContentBlock(data: ContentBlockCreateInput!): ContentBlock
  createContentBlocks(data: [ContentBlockCreateInput!]!): [ContentBlock]
  updateContentBlock(
    where: ContentBlockWhereUniqueInput!
    data: ContentBlockUpdateInput!
  ): ContentBlock
  updateContentBlocks(data: [ContentBlockUpdateArgs!]!): [ContentBlock]
  deleteContentBlock(where: ContentBlockWhereUniqueInput!): ContentBlock
  deleteContentBlocks(where: [ContentBlockWhereUniqueInput!]!): [ContentBlock]
  createContentType(data: ContentTypeCreateInput!): ContentType
  createContentTypes(data: [ContentTypeCreateInput!]!): [ContentType]
  updateContentType(
    where: ContentTypeWhereUniqueInput!
    data: ContentTypeUpdateInput!
  ): ContentType
  updateContentTypes(data: [ContentTypeUpdateArgs!]!): [ContentType]
  deleteContentType(where: ContentTypeWhereUniqueInput!): ContentType
  deleteContentTypes(where: [ContentTypeWhereUniqueInput!]!): [ContentType]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createBlock(data: BlockCreateInput!): Block
  createBlocks(data: [BlockCreateInput!]!): [Block]
  updateBlock(where: BlockWhereUniqueInput!, data: BlockUpdateInput!): Block
  updateBlocks(data: [BlockUpdateArgs!]!): [Block]
  deleteBlock(where: BlockWhereUniqueInput!): Block
  deleteBlocks(where: [BlockWhereUniqueInput!]!): [Block]
  createTransfer(data: TransferCreateInput!): Transfer
  createTransfers(data: [TransferCreateInput!]!): [Transfer]
  updateTransfer(
    where: TransferWhereUniqueInput!
    data: TransferUpdateInput!
  ): Transfer
  updateTransfers(data: [TransferUpdateArgs!]!): [Transfer]
  deleteTransfer(where: TransferWhereUniqueInput!): Transfer
  deleteTransfers(where: [TransferWhereUniqueInput!]!): [Transfer]
  createHolder(data: HolderCreateInput!): Holder
  createHolders(data: [HolderCreateInput!]!): [Holder]
  updateHolder(where: HolderWhereUniqueInput!, data: HolderUpdateInput!): Holder
  updateHolders(data: [HolderUpdateArgs!]!): [Holder]
  deleteHolder(where: HolderWhereUniqueInput!): Holder
  deleteHolders(where: [HolderWhereUniqueInput!]!): [Holder]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  payments(
    where: PaymentWhereInput! = {}
    orderBy: [PaymentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Payment!]
  payment(where: PaymentWhereUniqueInput!): Payment
  paymentsCount(where: PaymentWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  notifications(
    where: NotificationWhereInput! = {}
    orderBy: [NotificationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Notification!]
  notification(where: NotificationWhereUniqueInput!): Notification
  notificationsCount(where: NotificationWhereInput! = {}): Int
  marketStats(
    where: MarketStatWhereInput! = {}
    orderBy: [MarketStatOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MarketStat!]
  marketStat(where: MarketStatWhereUniqueInput!): MarketStat
  marketStatsCount(where: MarketStatWhereInput! = {}): Int
  liquidityPairs(
    where: LiquidityPairWhereInput! = {}
    orderBy: [LiquidityPairOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LiquidityPair!]
  liquidityPair(where: LiquidityPairWhereUniqueInput!): LiquidityPair
  liquidityPairsCount(where: LiquidityPairWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  exchanges(
    where: ExchangeWhereInput! = {}
    orderBy: [ExchangeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Exchange!]
  exchange(where: ExchangeWhereUniqueInput!): Exchange
  exchangesCount(where: ExchangeWhereInput! = {}): Int
  tokens(
    where: TokenWhereInput! = {}
    orderBy: [TokenOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Token!]
  token(where: TokenWhereUniqueInput!): Token
  tokensCount(where: TokenWhereInput! = {}): Int
  networks(
    where: NetworkWhereInput! = {}
    orderBy: [NetworkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Network!]
  network(where: NetworkWhereUniqueInput!): Network
  networksCount(where: NetworkWhereInput! = {}): Int
  stableLiquidityPairs(
    where: StableLiquidityPairWhereInput! = {}
    orderBy: [StableLiquidityPairOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StableLiquidityPair!]
  stableLiquidityPair(
    where: StableLiquidityPairWhereUniqueInput!
  ): StableLiquidityPair
  stableLiquidityPairsCount(where: StableLiquidityPairWhereInput! = {}): Int
  discordBots(
    where: DiscordBotWhereInput! = {}
    orderBy: [DiscordBotOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscordBot!]
  discordBot(where: DiscordBotWhereUniqueInput!): DiscordBot
  discordBotsCount(where: DiscordBotWhereInput! = {}): Int
  contents(
    where: ContentWhereInput! = {}
    orderBy: [ContentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Content!]
  content(where: ContentWhereUniqueInput!): Content
  contentsCount(where: ContentWhereInput! = {}): Int
  contentBlocks(
    where: ContentBlockWhereInput! = {}
    orderBy: [ContentBlockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ContentBlock!]
  contentBlock(where: ContentBlockWhereUniqueInput!): ContentBlock
  contentBlocksCount(where: ContentBlockWhereInput! = {}): Int
  contentTypes(
    where: ContentTypeWhereInput! = {}
    orderBy: [ContentTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ContentType!]
  contentType(where: ContentTypeWhereUniqueInput!): ContentType
  contentTypesCount(where: ContentTypeWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  blocks(
    where: BlockWhereInput! = {}
    orderBy: [BlockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Block!]
  block(where: BlockWhereUniqueInput!): Block
  blocksCount(where: BlockWhereInput! = {}): Int
  transfers(
    where: TransferWhereInput! = {}
    orderBy: [TransferOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Transfer!]
  transfer(where: TransferWhereUniqueInput!): Transfer
  transfersCount(where: TransferWhereInput! = {}): Int
  holders(
    where: HolderWhereInput! = {}
    orderBy: [HolderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Holder!]
  holder(where: HolderWhereUniqueInput!): Holder
  holdersCount(where: HolderWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
