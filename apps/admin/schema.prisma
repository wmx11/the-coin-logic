// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                       String              @id @default(cuid())
  name                     String              @default("")
  firstName                String              @default("")
  lastName                 String              @default("")
  email                    String              @unique @default("")
  ip                       String              @default("")
  roles                    Role[]              @relation("Role_users")
  password                 String
  isAdmin                  Boolean             @default(false)
  isSubscribedToEmail      Boolean             @default(false)
  isNotChargeable          Boolean             @default(false)
  isVerified               Boolean             @default(true)
  subscription             Subscription?       @relation("Subscription_user")
  referrer                 String              @default("")
  referralCode             String              @default("")
  walletAddress            String              @default("")
  projects                 Project[]           @relation("Project_user")
  marketingCampaigns       MarketingCampaign[] @relation("MarketingCampaign_users")
  dateCreated              DateTime?           @default(now())
  passwordResetToken       String?
  passwordResetIssuedAt    DateTime?
  passwordResetRedeemedAt  DateTime?
  from_CreatorRating_user  CreatorRating[]     @relation("CreatorRating_user")
  from_CreatorReview_user  CreatorReview[]     @relation("CreatorReview_user")
  from_ProjectRating_user  ProjectRating[]     @relation("ProjectRating_user")
  from_ProjectComment_user ProjectComment[]    @relation("ProjectComment_user")
  from_Cart_user           Cart[]              @relation("Cart_user")
  from_Order_user          Order[]             @relation("Order_user")
}

model Subscription {
  id        String    @id @default(cuid())
  isActive  Boolean   @default(false)
  product   Product[] @relation("Subscription_product")
  user      User?     @relation("Subscription_user", fields: [userId], references: [id])
  userId    String?   @unique @map("user")
  order     Order?    @relation("Subscription_order", fields: [orderId], references: [id])
  orderId   String?   @map("order")
  dateFrom  DateTime? @default(now())
  dateTo    DateTime?
  dateAdded DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([orderId])
}

model Product {
  id                        String         @id @default(cuid())
  name                      String         @default("")
  slug                      String         @default("")
  sku                       String         @default("")
  enabled                   Boolean        @default(false)
  isForListed               Boolean        @default(false)
  isForUnlisted             Boolean        @default(false)
  isOneTime                 Boolean        @default(false)
  isMonthly                 Boolean        @default(false)
  label                     String         @default("")
  priceLabel                String         @default("")
  price                     Float?
  discount                  Float?
  description               String         @default("")
  offers                    String         @default("")
  styles                    Json?
  dateAdded                 DateTime?      @default(now())
  updatedAt                 DateTime?      @updatedAt
  from_Subscription_product Subscription[] @relation("Subscription_product")
  from_CartItem_product     CartItem[]     @relation("CartItem_product")
  from_OrderItem_product    OrderItem[]    @relation("OrderItem_product")
}

model Role {
  id             String    @id @default(cuid())
  name           String    @default("")
  slug           String    @default("")
  isAdmin        Boolean   @default(false)
  isModerator    Boolean   @default(false)
  isEditor       Boolean   @default(false)
  isProjectOwner Boolean   @default(false)
  users          User[]    @relation("Role_users")
  dateAdded      DateTime? @default(now())
}

model Project {
  id                             String              @id @default(cuid())
  name                           String              @default("")
  slug                           String              @default("")
  logo_filesize                  Int?
  logo_extension                 String?
  logo_width                     Int?
  logo_height                    Int?
  logo_id                        String?
  enabled                        Boolean             @default(false)
  isPending                      Boolean             @default(false)
  isAwaitingPayment              Boolean             @default(false)
  isListed                       Boolean             @default(false)
  trackData                      Boolean             @default(false)
  trackSocials                   Boolean             @default(false)
  trackHolders                   Boolean             @default(false)
  periodicWalletUpdates          Boolean             @default(false)
  initialized                    Boolean             @default(false)
  markForDeletion                Boolean             @default(false)
  useDexScreener                 Boolean             @default(false)
  status                         String?
  tags                           Tag[]               @relation("Project_tags")
  contractAddress                String              @default("")
  pairAddress                    String              @default("")
  exhangeAddress                 String              @default("")
  burnAddress                    String              @default("0x000000000000000000000000000000000000dead")
  liquidityPair                  LiquidityPair[]     @relation("LiquidityPair_project")
  network                        Network?            @relation("Project_network", fields: [networkId], references: [id])
  networkId                      String?             @map("network")
  trackHoldersFromTokenAmount    Float?              @default(0)
  trackHoldersFromDollarAmount   Float?              @default(0)
  description                    String              @default("")
  launchDate                     DateTime?
  launchBlock                    Int?
  user                           User[]              @relation("Project_user")
  notifications                  Notification[]      @relation("Notification_project")
  ABI                            Json?
  customTrackers                 CustomTracker[]     @relation("CustomTracker_project")
  sellTax                        Float?
  buyTax                         Float?
  rebasePeriod                   String              @default("")
  apy                            Float?
  dailyApy                       Float?
  calendar                       String              @default("")
  website                        String              @default("")
  whitepaper                     String              @default("")
  twitter                        String              @default("")
  telegram                       String              @default("")
  discord                        String              @default("")
  discordServerId                String              @default("")
  reddit                         String              @default("")
  youtube                        String              @default("")
  github                         String              @default("")
  medium                         String              @default("")
  kycLink                        String              @default("")
  auditLink                      String              @default("")
  auditBy                        Audit[]             @relation("Audit_project")
  kycBy                          Kyc[]               @relation("Kyc_project")
  dateAdded                      DateTime?           @default(now())
  ratings                        ProjectRating[]     @relation("ProjectRating_project")
  reviews                        ProjectComment[]    @relation("ProjectComment_project")
  parentProject                  Project[]           @relation("Project_parentProject")
  relatedProjects                Project[]           @relation("Project_relatedProjects")
  from_Project_parentProject     Project[]           @relation("Project_parentProject")
  from_Project_relatedProjects   Project[]           @relation("Project_relatedProjects")
  from_MarketStat_project        MarketStat[]        @relation("MarketStat_project")
  from_SocialStat_project        SocialStat[]        @relation("SocialStat_project")
  from_DiscordBot_project        DiscordBot[]        @relation("DiscordBot_project")
  from_Block_project             Block[]             @relation("Block_project")
  from_Transfer_project          Transfer[]          @relation("Transfer_project")
  from_Holder_projects           Holder[]            @relation("Holder_projects")
  from_MarketingCampaign_project MarketingCampaign[] @relation("MarketingCampaign_project")
  from_Order_project             Order[]             @relation("Order_project")

  @@index([slug])
  @@index([networkId])
}

model Audit {
  id        String   @id @default(cuid())
  project   Project? @relation("Audit_project", fields: [projectId], references: [id])
  projectId String?  @map("project")
  auditor   Auditor? @relation("Audit_auditor", fields: [auditorId], references: [id])
  auditorId String?  @map("auditor")
  url       String   @default("")

  @@index([projectId])
  @@index([auditorId])
}

model Kyc {
  id         String    @id @default(cuid())
  project    Project?  @relation("Kyc_project", fields: [projectId], references: [id])
  projectId  String?   @map("project")
  kycGroup   KycGroup? @relation("Kyc_kycGroup", fields: [kycGroupId], references: [id])
  kycGroupId String?   @map("kycGroup")
  url        String    @default("")

  @@index([projectId])
  @@index([kycGroupId])
}

model Notification {
  id        String    @id @default(cuid())
  title     String    @default("")
  enabled   Boolean   @default(false)
  content   String    @default("")
  type      String?
  project   Project?  @relation("Notification_project", fields: [projectId], references: [id])
  projectId String?   @map("project")
  dateAdded DateTime? @default(now())

  @@index([projectId])
}

model MarketStat {
  id               String    @id @default(cuid())
  price            Float?
  marketCap        Float?
  totalSupply      Float?
  liquidity        Float?
  pairPrice        Float?
  burnedTokens     Float?
  txns             Json?
  volume           Json?
  fdv              Float?
  holders          Float?
  avgHoldings      Float?
  newHolders       Float?
  leavingHolders   Float?
  recurringHolders Float?
  annotation       String    @default("")
  customTrackers   Json?     @default("[]")
  project          Project?  @relation("MarketStat_project", fields: [projectId], references: [id])
  projectId        String?   @map("project")
  dateAdded        DateTime? @default(now())

  @@index([projectId])
  @@index([dateAdded])
}

model SocialStat {
  id        String    @id @default(cuid())
  twitter   Float?
  telegram  Float?
  discord   Float?
  project   Project?  @relation("SocialStat_project", fields: [projectId], references: [id])
  projectId String?   @map("project")
  dateAdded DateTime? @default(now())

  @@index([projectId])
  @@index([dateAdded])
}

model CustomTracker {
  id                           String    @id @default(cuid())
  label                        String    @default("")
  description                  String    @default("")
  address                      String    @default("")
  pairAddress                  String    @default("")
  getBalanceOf                 String    @default("")
  decimals                     Float?    @default(18)
  enabled                      Boolean   @default(false)
  useDexScreener               Boolean   @default(false)
  isCurrency                   Boolean   @default(false)
  applyProjectNativeTokenPrice Boolean   @default(false)
  applyProjectTokenPrice       Boolean   @default(false)
  method                       String?
  network                      Network?  @relation("CustomTracker_network", fields: [networkId], references: [id])
  networkId                    String?   @map("network")
  project                      Project[] @relation("CustomTracker_project")
  dateAdded                    DateTime? @default(now())

  @@index([networkId])
}

model LiquidityPair {
  id             String               @id @default(cuid())
  name           String               @default("")
  address        String               @default("")
  tokenAddress   String               @default("")
  order          Int?                 @default(1)
  isPrimary      Boolean              @default(false)
  useDexScreener Boolean              @default(false)
  stablePair     StableLiquidityPair? @relation("LiquidityPair_stablePair", fields: [stablePairId], references: [id])
  stablePairId   String?              @map("stablePair")
  network        Network?             @relation("LiquidityPair_network", fields: [networkId], references: [id])
  networkId      String?              @map("network")
  project        Project[]            @relation("LiquidityPair_project")
  exchange       Exchange?            @relation("LiquidityPair_exchange", fields: [exchangeId], references: [id])
  exchangeId     String?              @map("exchange")
  dateAdded      DateTime?            @default(now())

  @@index([stablePairId])
  @@index([networkId])
  @@index([exchangeId])
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @default("")
  projects  Project[] @relation("Project_tags")
  dateAdded DateTime? @default(now())
}

model Exchange {
  id                          String          @id @default(cuid())
  name                        String          @default("")
  logo_filesize               Int?
  logo_extension              String?
  logo_width                  Int?
  logo_height                 Int?
  logo_id                     String?
  url                         String          @default("")
  tradeUrl                    String          @default("")
  dateAdded                   DateTime?       @default(now())
  from_LiquidityPair_exchange LiquidityPair[] @relation("LiquidityPair_exchange")
}

model Token {
  id                                 String                @id @default(cuid())
  name                               String                @default("")
  address                            String                @default("")
  order                              Int?                  @default(1)
  ABI                                Json?
  network                            Network?              @relation("Token_network", fields: [networkId], references: [id])
  networkId                          String?               @map("network")
  dateAdded                          DateTime?             @default(now())
  from_StableLiquidityPair_pairToken StableLiquidityPair[] @relation("StableLiquidityPair_pairToken")

  @@index([networkId])
}

model Network {
  id                               String                @id @default(cuid())
  name                             String                @default("")
  slug                             String                @default("")
  logo_filesize                    Int?
  logo_extension                   String?
  logo_width                       Int?
  logo_height                      Int?
  logo_id                          String?
  url                              String                @default("")
  scanner                          String                @default("")
  tokenScanner                     String                @default("")
  txScanner                        String                @default("")
  dateAdded                        DateTime?             @default(now())
  from_Project_network             Project[]             @relation("Project_network")
  from_CustomTracker_network       CustomTracker[]       @relation("CustomTracker_network")
  from_LiquidityPair_network       LiquidityPair[]       @relation("LiquidityPair_network")
  from_Token_network               Token[]               @relation("Token_network")
  from_StableLiquidityPair_network StableLiquidityPair[] @relation("StableLiquidityPair_network")
  from_Order_paymentNetwork        Order[]               @relation("Order_paymentNetwork")
}

model StableLiquidityPair {
  id                            String          @id @default(cuid())
  name                          String          @default("")
  address                       String          @default("")
  pairToken                     Token[]         @relation("StableLiquidityPair_pairToken")
  network                       Network?        @relation("StableLiquidityPair_network", fields: [networkId], references: [id])
  networkId                     String?         @map("network")
  dateAdded                     DateTime?       @default(now())
  from_LiquidityPair_stablePair LiquidityPair[] @relation("LiquidityPair_stablePair")

  @@index([networkId])
}

model DiscordBot {
  id             String    @id @default(cuid())
  name           String    @default("")
  enabled        Boolean   @default(false)
  presence       String    @default("")
  botId          String    @default("")
  apiKey         String    @default("")
  tracking       String?
  customTracking String    @default("")
  project        Project?  @relation("DiscordBot_project", fields: [projectId], references: [id])
  projectId      String?   @map("project")
  dateAdded      DateTime? @default(now())

  @@index([projectId])
}

model Content {
  id              String        @id @default(cuid())
  title           String        @default("")
  slug            String        @default("")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  contentType     ContentType?  @relation("Content_contentType", fields: [contentTypeId], references: [id])
  contentTypeId   String?       @map("contentType")
  enabled         Boolean       @default(false)
  summary         String        @default("")
  content         Json          @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  blockName       ContentBlock? @relation("Content_blockName", fields: [blockNameId], references: [id])
  blockNameId     String?       @map("blockName")
  dateAdded       DateTime?     @default(now())

  @@index([contentTypeId])
  @@index([blockNameId])
}

model ContentBlock {
  id                     String    @id @default(cuid())
  title                  String    @default("")
  blockName              String    @default("")
  enabled                Boolean   @default(false)
  dateAdded              DateTime? @default(now())
  from_Content_blockName Content[] @relation("Content_blockName")
}

model ContentType {
  id                       String    @id @default(cuid())
  title                    String    @default("")
  typeName                 String    @default("")
  dateAdded                DateTime? @default(now())
  from_Content_contentType Content[] @relation("Content_contentType")
}

model Image {
  id              String    @id @default(cuid())
  title           String    @default("")
  slug            String    @default("")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  enabled         Boolean   @default(false)
  dateAdded       DateTime? @default(now())
}

model Block {
  id            String    @id @default(cuid())
  project       Project?  @relation("Block_project", fields: [projectId], references: [id])
  projectId     String?   @map("project")
  firstBlock    Int?      @default(0)
  previousBlock Int?      @default(0)
  lastBlock     Int?      @default(0)
  dateAdded     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  @@index([projectId])
}

model Transfer {
  id                    String    @id @default(cuid())
  project               Project?  @relation("Transfer_project", fields: [projectId], references: [id])
  projectId             String?   @map("project")
  amount                Float?    @default(0)
  type                  Int?
  address               String    @default("")
  fromAddress           String    @default("")
  toAddress             String    @default("")
  hash                  String    @default("")
  block                 Int?
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @updatedAt
  from_Holder_transfers Holder[]  @relation("Holder_transfers")

  @@index([projectId])
  @@index([toAddress])
  @@index([hash])
  @@index([createdAt])
}

model Holder {
  id         String     @id @default(cuid())
  address    String     @default("")
  balance    Float?     @default(0)
  note       String     @default("")
  isContract Boolean    @default(false)
  projects   Project?   @relation("Holder_projects", fields: [projectsId], references: [id])
  projectsId String?    @map("projects")
  transfers  Transfer[] @relation("Holder_transfers")
  dateAdded  DateTime?  @default(now())
  updatedAt  DateTime?  @updatedAt

  @@index([address])
  @@index([projectsId])
  @@index([dateAdded])
}

model Creator {
  id                 String              @id @default(cuid())
  name               String              @default("")
  slug               String              @default("")
  enabled            Boolean             @default(false)
  isListed           Boolean             @default(false)
  nickname           String              @default("")
  image_filesize     Int?
  image_extension    String?
  image_width        Int?
  image_height       Int?
  image_id           String?
  description        String              @default("")
  website            String              @default("")
  twitter            String              @default("")
  telegram           String              @default("")
  discord            String              @default("")
  reddit             String              @default("")
  youtube            String              @default("")
  priceFrom          Float?
  priceTo            Float?
  marketingCampaigns MarketingCampaign[] @relation("MarketingCampaign_creator")
  ratings            CreatorRating[]     @relation("CreatorRating_creator")
  reviews            CreatorReview[]     @relation("CreatorReview_creator")
  dateAdded          DateTime?           @default(now())
  updatedAt          DateTime?           @updatedAt
}

model Auditor {
  id                 String    @id @default(cuid())
  name               String    @default("")
  slug               String    @default("")
  enabled            Boolean   @default(false)
  isListed           Boolean   @default(false)
  image_filesize     Int?
  image_extension    String?
  image_width        Int?
  image_height       Int?
  image_id           String?
  description        String    @default("")
  website            String    @default("")
  twitter            String    @default("")
  telegram           String    @default("")
  discord            String    @default("")
  reddit             String    @default("")
  youtube            String    @default("")
  priceFrom          Float?
  priceTo            Float?
  dateAdded          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt
  from_Audit_auditor Audit[]   @relation("Audit_auditor")
}

model KycGroup {
  id                String    @id @default(cuid())
  name              String    @default("")
  slug              String    @default("")
  enabled           Boolean   @default(false)
  isListed          Boolean   @default(false)
  image_filesize    Int?
  image_extension   String?
  image_width       Int?
  image_height      Int?
  image_id          String?
  description       String    @default("")
  website           String    @default("")
  twitter           String    @default("")
  telegram          String    @default("")
  discord           String    @default("")
  reddit            String    @default("")
  youtube           String    @default("")
  priceFrom         Float?
  priceTo           Float?
  dateAdded         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  from_Kyc_kycGroup Kyc[]     @relation("Kyc_kycGroup")
}

model CreatorRating {
  id        String    @id @default(cuid())
  rating    Int?      @default(0)
  user      User?     @relation("CreatorRating_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  creator   Creator?  @relation("CreatorRating_creator", fields: [creatorId], references: [id])
  creatorId String?   @map("creator")
  dateAdded DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([userId])
  @@index([creatorId])
}

model CreatorReview {
  id        String    @id @default(cuid())
  review    String    @default("")
  user      User?     @relation("CreatorReview_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  creator   Creator?  @relation("CreatorReview_creator", fields: [creatorId], references: [id])
  creatorId String?   @map("creator")
  dateAdded DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([userId])
  @@index([creatorId])
}

model ProjectRating {
  id        String    @id @default(cuid())
  rating    Int?      @default(0)
  ip        String    @default("")
  user      User?     @relation("ProjectRating_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  project   Project?  @relation("ProjectRating_project", fields: [projectId], references: [id])
  projectId String?   @map("project")
  dateAdded DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([userId])
  @@index([projectId])
  @@index([dateAdded])
}

model ProjectComment {
  id        String    @id @default(cuid())
  comment   String    @default("")
  user      User?     @relation("ProjectComment_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  project   Project?  @relation("ProjectComment_project", fields: [projectId], references: [id])
  projectId String?   @map("project")
  dateAdded DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([userId])
  @@index([projectId])
}

model MarketingCampaign {
  id                                            String                   @id @default(cuid())
  name                                          String                   @default("")
  campaignId                                    String                   @default("")
  users                                         User[]                   @relation("MarketingCampaign_users")
  enabled                                       Boolean                  @default(true)
  status                                        String?                  @default("live")
  isInternal                                    Boolean                  @default(false)
  trackMarket                                   Boolean                  @default(true)
  trackSocial                                   Boolean                  @default(true)
  startDate                                     DateTime?                @postgresql.Date
  endDate                                       DateTime?                @postgresql.Date
  budget                                        Float?
  description                                   String                   @default("")
  notes                                         String                   @default("")
  agency                                        String                   @default("")
  agencyUrl                                     String                   @default("")
  creator                                       Creator?                 @relation("MarketingCampaign_creator", fields: [creatorId], references: [id])
  creatorId                                     String?                  @map("creator")
  project                                       Project?                 @relation("MarketingCampaign_project", fields: [projectId], references: [id])
  projectId                                     String?                  @map("project")
  marketStatSnapshot                            Json?
  finalSnapshot                                 Json?
  marketBudget                                  Float?
  socialBudget                                  Float?
  priceGoal                                     Float?
  marketCapGoal                                 Float?
  volumeGoal                                    Float?
  holdersGoal                                   Float?
  twitterGoal                                   Float?
  discordGoal                                   Float?
  telegramGoal                                  Float?
  dateAdded                                     DateTime?                @default(now())
  updatedAt                                     DateTime?                @updatedAt
  from_MarketingTrackerResult_marketingCampaign MarketingTrackerResult[] @relation("MarketingTrackerResult_marketingCampaign")

  @@index([creatorId])
  @@index([projectId])
}

model MarketingTrackerResult {
  id                  String             @id @default(cuid())
  referer             String             @default("")
  ipAddress           String             @default("")
  userAgent           String             @default("")
  device              String             @default("")
  os                  String             @default("")
  timezone            String             @default("")
  city                String             @default("")
  country             String             @default("")
  countryCode         String             @default("")
  target              String             @default("")
  marketingCampaign   MarketingCampaign? @relation("MarketingTrackerResult_marketingCampaign", fields: [marketingCampaignId], references: [id])
  marketingCampaignId String?            @map("marketingCampaign")
  dateAdded           DateTime?          @default(now())
  updatedAt           DateTime?          @updatedAt

  @@index([marketingCampaignId])
  @@index([dateAdded])
}

model Cart {
  id        String     @id @default(cuid())
  user      User?      @relation("Cart_user", fields: [userId], references: [id])
  userId    String?    @map("user")
  cartItem  CartItem[] @relation("CartItem_cart")
  dateAdded DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt

  @@index([userId])
}

model CartItem {
  id        String    @id @default(cuid())
  product   Product?  @relation("CartItem_product", fields: [productId], references: [id])
  productId String?   @map("product")
  cart      Cart?     @relation("CartItem_cart", fields: [cartId], references: [id])
  cartId    String?   @map("cart")
  price     Float?
  tax       Float?    @default(0)
  discount  Float?    @default(0)
  quantity  Float?    @default(1)
  dateAdded DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([productId])
  @@index([cartId])
}

model Order {
  id                      String         @id @default(cuid())
  orderNumber             Int            @default(autoincrement())
  user                    User?          @relation("Order_user", fields: [userId], references: [id])
  userId                  String?        @map("user")
  orderItem               OrderItem[]    @relation("OrderItem_order")
  project                 Project?       @relation("Order_project", fields: [projectId], references: [id])
  projectId               String?        @map("project")
  walletAddress           String         @default("")
  transactionHash         String         @default("")
  currency                String         @default("")
  currencyPriceEur        Float?
  durationInMonths        Float?
  paymentNetwork          Network?       @relation("Order_paymentNetwork", fields: [paymentNetworkId], references: [id])
  paymentNetworkId        String?        @map("paymentNetwork")
  discount                Float?         @default(0)
  tax                     Float?         @default(0)
  total                   Float?
  subTotal                Float?
  grandTotal              Float?
  dateAdded               DateTime?      @default(now())
  updatedAt               DateTime?      @updatedAt
  from_Subscription_order Subscription[] @relation("Subscription_order")

  @@index([userId])
  @@index([projectId])
  @@index([paymentNetworkId])
}

model OrderItem {
  id        String    @id @default(cuid())
  order     Order?    @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId   String?   @map("order")
  product   Product?  @relation("OrderItem_product", fields: [productId], references: [id])
  productId String?   @map("product")
  price     Float?
  quantity  Float?    @default(1)
  discount  Float?    @default(0)
  tax       Float?    @default(0)
  dateAdded DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([orderId])
  @@index([productId])
}