// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                              String               @id @default(cuid())
  name                            String               @default("")
  firstName                       String               @default("")
  lastName                        String               @default("")
  email                           String               @unique @default("")
  ip                              String               @default("")
  userAuth                        UserAuth?            @relation("User_userAuth", fields: [userAuthId], references: [id])
  userAuthId                      String?              @unique @map("userAuth")
  roles                           Role[]               @relation("Role_users")
  password                        String
  isAdmin                         Boolean              @default(false)
  isSubscribedToEmail             Boolean              @default(false)
  isNotChargeable                 Boolean              @default(false)
  isVerified                      Boolean              @default(true)
  subscription                    Subscription?        @relation("Subscription_user")
  referrer                        String               @default("")
  referralCode                    String               @default("")
  walletAddress                   String               @default("")
  content                         Content[]            @relation("Content_user")
  projects                        Project[]            @relation("Project_user")
  managedProjects                 Project[]            @relation("User_managedProjects")
  marketingCampaigns              MarketingCampaign[]  @relation("MarketingCampaign_users")
  followedProviders               Provider[]           @relation("Provider_followers")
  serviceTokens                   ServiceToken?        @relation("ServiceToken_user")
  providerProfile                 Provider?            @relation("Provider_user")
  dateCreated                     DateTime?            @default(now())
  passwordResetToken              String?
  passwordResetIssuedAt           DateTime?
  passwordResetRedeemedAt         DateTime?
  from_Coupon_acceptFromReferrers Coupon[]             @relation("Coupon_acceptFromReferrers")
  from_Content_likes              Content[]            @relation("Content_likes")
  from_Comment_likes              Comment[]            @relation("Comment_likes")
  from_Comment_reports            Comment[]            @relation("Comment_reports")
  from_Comment_user               Comment[]            @relation("Comment_user")
  from_TransparencyRating_user    TransparencyRating[] @relation("TransparencyRating_user")
  from_Cart_user                  Cart[]               @relation("Cart_user")
  from_Order_user                 Order[]              @relation("Order_user")
  from_Vote_user                  Vote[]               @relation("Vote_user")
  from_Quiz_user                  Quiz[]               @relation("Quiz_user")
  from_Quiz_likes                 Quiz[]               @relation("Quiz_likes")
  from_Transcription_user         Transcription[]      @relation("Transcription_user")
  from_Transcription_likes        Transcription[]      @relation("Transcription_likes")
}

model Subscription {
  id        String    @id @default(cuid())
  isActive  Boolean   @default(false)
  product   Product[] @relation("Subscription_product")
  user      User?     @relation("Subscription_user", fields: [userId], references: [id])
  userId    String?   @unique @map("user")
  order     Order?    @relation("Subscription_order", fields: [orderId], references: [id])
  orderId   String?   @map("order")
  dateFrom  DateTime? @default(now())
  dateTo    DateTime?
  dateAdded DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([orderId])
}

model Product {
  id                        String         @id @default(cuid())
  name                      String         @default("")
  slug                      String         @default("")
  sku                       String         @default("")
  enabled                   Boolean        @default(false)
  isForListed               Boolean        @default(false)
  isForUnlisted             Boolean        @default(false)
  isOneTime                 Boolean        @default(false)
  isMonthly                 Boolean        @default(false)
  label                     String         @default("")
  priceLabel                String         @default("")
  price                     Float?
  discount                  Float?
  description               String         @default("")
  offers                    String         @default("")
  styles                    Json?
  dateAdded                 DateTime?      @default(now())
  updatedAt                 DateTime?      @updatedAt
  from_Subscription_product Subscription[] @relation("Subscription_product")
  from_CartItem_product     CartItem[]     @relation("CartItem_product")
  from_OrderItem_product    OrderItem[]    @relation("OrderItem_product")
}

model Role {
  id             String    @id @default(cuid())
  name           String    @default("")
  slug           String    @default("")
  isAdmin        Boolean   @default(false)
  isModerator    Boolean   @default(false)
  isEditor       Boolean   @default(false)
  isProjectOwner Boolean   @default(false)
  users          User[]    @relation("Role_users")
  dateAdded      DateTime? @default(now())
}

model Project {
  id                             String                @id @default(cuid())
  name                           String                @default("")
  slug                           String                @default("")
  logo_filesize                  Int?
  logo_extension                 String?
  logo_width                     Int?
  logo_height                    Int?
  logo_id                        String?
  dateAdded                      DateTime?             @default(now())
  enabled                        Boolean               @default(false)
  isPending                      Boolean               @default(false)
  isAwaitingPayment              Boolean               @default(false)
  isListed                       Boolean               @default(false)
  isNft                          Boolean               @default(false)
  displayBlogPosts               Boolean               @default(false)
  displayTransparencyScore       Boolean               @default(false)
  displayCommunityVotes          Boolean               @default(false)
  displayCommunityComments       Boolean               @default(false)
  trackData                      Boolean               @default(false)
  trackPrice                     Boolean               @default(false)
  trackMarketCap                 Boolean               @default(false)
  trackSocials                   Boolean               @default(false)
  trackHolders                   Boolean               @default(false)
  periodicWalletUpdates          Boolean               @default(false)
  initialized                    Boolean               @default(false)
  markForDeletion                Boolean               @default(false)
  useDexScreener                 Boolean               @default(false)
  status                         String?
  tags                           Tag[]                 @relation("Project_tags")
  contractAddress                String                @default("")
  pairAddress                    String                @default("")
  exhangeAddress                 String                @default("")
  burnAddress                    String                @default("0x000000000000000000000000000000000000dead")
  liquidityPair                  LiquidityPair[]       @relation("LiquidityPair_project")
  network                        Network?              @relation("Project_network", fields: [networkId], references: [id])
  networkId                      String?               @map("network")
  trackHoldersFromTokenAmount    Float?                @default(0)
  trackHoldersFromDollarAmount   Float?                @default(0)
  description                    String                @default("")
  launchDate                     DateTime?
  launchBlock                    Int?
  user                           User[]                @relation("Project_user")
  notifications                  Notification[]        @relation("Notification_project")
  ABI                            Json?
  customTrackers                 CustomTracker[]       @relation("CustomTracker_project")
  sellTax                        Float?
  buyTax                         Float?
  rebasePeriod                   String                @default("")
  apy                            Float?
  dailyApy                       Float?
  calendar                       String                @default("")
  website                        String                @default("")
  whitepaper                     String                @default("")
  twitter                        String                @default("")
  telegram                       String                @default("")
  discord                        String                @default("")
  discordServerId                String                @default("")
  reddit                         String                @default("")
  youtube                        String                @default("")
  github                         String                @default("")
  medium                         String                @default("")
  kycLink                        String                @default("")
  auditLink                      String                @default("")
  customVetting                  String                @default("")
  tclRating                      Int?
  transparencyScore              Int?
  paymentPlan                    PaymentPlan?          @relation("Project_paymentPlan", fields: [paymentPlanId], references: [id])
  paymentPlanId                  String?               @map("paymentPlan")
  auditBy                        Audit[]               @relation("Audit_project")
  kycBy                          Kyc[]                 @relation("Kyc_project")
  transparencyRatings            TransparencyRating[]  @relation("TransparencyRating_project")
  transparencyHighlights         Json?                 @default("[{\"isPositive\":false,\"content\":\"\"}]")
  content                        Content[]             @relation("Content_project")
  comments                       Comment[]             @relation("Comment_project")
  votes                          Vote[]                @relation("Vote_project")
  events                         DiscordEvent[]        @relation("DiscordEvent_project")
  announcements                  DiscordAnnouncement[] @relation("DiscordAnnouncement_project")
  discordConfig                  DiscordConfig?        @relation("DiscordConfig_project")
  parentProject                  Project[]             @relation("Project_parentProject")
  relatedProjects                Project[]             @relation("Project_relatedProjects")
  from_User_managedProjects      User[]                @relation("User_managedProjects")
  from_Project_parentProject     Project[]             @relation("Project_parentProject")
  from_Project_relatedProjects   Project[]             @relation("Project_relatedProjects")
  from_MarketStat_project        MarketStat[]          @relation("MarketStat_project")
  from_SocialStat_project        SocialStat[]          @relation("SocialStat_project")
  from_DiscordBot_project        DiscordBot[]          @relation("DiscordBot_project")
  from_Block_project             Block[]               @relation("Block_project")
  from_Transfer_project          Transfer[]            @relation("Transfer_project")
  from_Holder_projects           Holder[]              @relation("Holder_projects")
  from_MarketingCampaign_project MarketingCampaign[]   @relation("MarketingCampaign_project")
  from_Order_project             Order[]               @relation("Order_project")
  from_Quiz_project              Quiz[]                @relation("Quiz_project")
  from_Transcription_project     Transcription[]       @relation("Transcription_project")

  @@index([slug])
  @@index([networkId])
  @@index([paymentPlanId])
}

model PaymentPlan {
  id                         String      @id @default(cuid())
  name                       String      @default("")
  slug                       String      @default("")
  tooltip                    String      @default("")
  description                String      @default("")
  enabled                    Boolean     @default(false)
  price                      Float?
  discount                   Float?
  dateAdded                  DateTime?   @default(now())
  updatedAt                  DateTime?   @updatedAt
  from_Project_paymentPlan   Project[]   @relation("Project_paymentPlan")
  from_CartItem_paymentPlan  CartItem[]  @relation("CartItem_paymentPlan")
  from_OrderItem_paymentPlan OrderItem[] @relation("OrderItem_paymentPlan")
}

model Coupon {
  id                  String    @id @default(cuid())
  name                String    @default("")
  code                String    @default("")
  enabled             Boolean   @default(false)
  discountPercentage  Int?
  timesPerUser        Int?
  validFrom           DateTime?
  validTill           DateTime?
  usedBy              Json?     @default("[{\"user\":\"id\",\"times\":0}]")
  acceptFromReferrers User[]    @relation("Coupon_acceptFromReferrers")
  acceptFromNetworks  Network[] @relation("Coupon_acceptFromNetworks")
  cart                Cart[]    @relation("Cart_couponCode")
  order               Order[]   @relation("Order_couponCode")
  dateAdded           DateTime? @default(now())
  updatedAt           DateTime? @updatedAt
}

model Audit {
  id        String   @id @default(cuid())
  project   Project? @relation("Audit_project", fields: [projectId], references: [id])
  projectId String?  @map("project")
  auditor   Auditor? @relation("Audit_auditor", fields: [auditorId], references: [id])
  auditorId String?  @map("auditor")
  url       String   @default("")

  @@index([projectId])
  @@index([auditorId])
}

model Kyc {
  id         String    @id @default(cuid())
  project    Project?  @relation("Kyc_project", fields: [projectId], references: [id])
  projectId  String?   @map("project")
  kycGroup   KycGroup? @relation("Kyc_kycGroup", fields: [kycGroupId], references: [id])
  kycGroupId String?   @map("kycGroup")
  url        String    @default("")

  @@index([projectId])
  @@index([kycGroupId])
}

model Notification {
  id        String    @id @default(cuid())
  title     String    @default("")
  enabled   Boolean   @default(false)
  content   String    @default("")
  type      String?
  project   Project?  @relation("Notification_project", fields: [projectId], references: [id])
  projectId String?   @map("project")
  dateAdded DateTime? @default(now())

  @@index([projectId])
}

model MarketStat {
  id               String    @id @default(cuid())
  price            Float?
  marketCap        Float?
  totalSupply      Float?
  liquidity        Float?
  pairPrice        Float?
  burnedTokens     Float?
  txns             Json?
  volume           Json?
  fdv              Float?
  holders          Float?
  avgHoldings      Float?
  newHolders       Float?
  leavingHolders   Float?
  recurringHolders Float?
  annotation       Json?     @default("{\"title\":null,\"description\":null,\"href\":null}")
  customTrackers   Json?     @default("[]")
  project          Project?  @relation("MarketStat_project", fields: [projectId], references: [id])
  projectId        String?   @map("project")
  dateAdded        DateTime? @default(now())

  @@index([price])
  @@index([marketCap])
  @@index([totalSupply])
  @@index([liquidity])
  @@index([pairPrice])
  @@index([burnedTokens])
  @@index([fdv])
  @@index([holders])
  @@index([avgHoldings])
  @@index([newHolders])
  @@index([leavingHolders])
  @@index([recurringHolders])
  @@index([projectId])
  @@index([dateAdded])
}

model SocialStat {
  id         String    @id @default(cuid())
  twitter    Float?
  telegram   Float?
  discord    Float?
  annotation Json?     @default("{\"title\":null,\"description\":null,\"href\":null}")
  project    Project?  @relation("SocialStat_project", fields: [projectId], references: [id])
  projectId  String?   @map("project")
  dateAdded  DateTime? @default(now())

  @@index([projectId])
  @@index([dateAdded])
}

model CustomTracker {
  id                           String    @id @default(cuid())
  label                        String    @default("")
  description                  String    @default("")
  address                      String    @default("")
  pairAddress                  String    @default("")
  getBalanceOf                 String    @default("")
  decimals                     Float?    @default(18)
  enabled                      Boolean   @default(false)
  useDexScreener               Boolean   @default(false)
  isCurrency                   Boolean   @default(false)
  applyProjectNativeTokenPrice Boolean   @default(false)
  applyProjectTokenPrice       Boolean   @default(false)
  method                       String?
  network                      Network?  @relation("CustomTracker_network", fields: [networkId], references: [id])
  networkId                    String?   @map("network")
  project                      Project[] @relation("CustomTracker_project")
  dateAdded                    DateTime? @default(now())

  @@index([networkId])
}

model LiquidityPair {
  id                    String               @id @default(cuid())
  name                  String               @default("")
  address               String               @default("")
  tokenAddress          String               @default("")
  order                 Int?                 @default(1)
  isPrimary             Boolean              @default(false)
  useDexScreener        Boolean              @default(false)
  stablePair            StableLiquidityPair? @relation("LiquidityPair_stablePair", fields: [stablePairId], references: [id])
  stablePairId          String?              @map("stablePair")
  network               Network?             @relation("LiquidityPair_network", fields: [networkId], references: [id])
  networkId             String?              @map("network")
  project               Project[]            @relation("LiquidityPair_project")
  exchange              Exchange?            @relation("LiquidityPair_exchange", fields: [exchangeId], references: [id])
  exchangeId            String?              @map("exchange")
  customExchangeAddress String               @default("")
  dateAdded             DateTime?            @default(now())

  @@index([stablePairId])
  @@index([networkId])
  @@index([exchangeId])
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @default("")
  type      String?
  projects  Project[]  @relation("Project_tags")
  providers Provider[] @relation("Provider_tags")
  dateAdded DateTime?  @default(now())
}

model Exchange {
  id                          String          @id @default(cuid())
  name                        String          @default("")
  logo_filesize               Int?
  logo_extension              String?
  logo_width                  Int?
  logo_height                 Int?
  logo_id                     String?
  url                         String          @default("")
  tradeUrl                    String          @default("")
  dateAdded                   DateTime?       @default(now())
  from_LiquidityPair_exchange LiquidityPair[] @relation("LiquidityPair_exchange")
}

model Token {
  id                                 String                @id @default(cuid())
  name                               String                @default("")
  address                            String                @default("")
  order                              Int?                  @default(1)
  ABI                                Json?
  network                            Network?              @relation("Token_network", fields: [networkId], references: [id])
  networkId                          String?               @map("network")
  dateAdded                          DateTime?             @default(now())
  from_StableLiquidityPair_pairToken StableLiquidityPair[] @relation("StableLiquidityPair_pairToken")

  @@index([networkId])
}

model Network {
  id                               String                @id @default(cuid())
  name                             String                @default("")
  slug                             String                @default("")
  logo_filesize                    Int?
  logo_extension                   String?
  logo_width                       Int?
  logo_height                      Int?
  logo_id                          String?
  url                              String                @default("")
  scanner                          String                @default("")
  tokenScanner                     String                @default("")
  txScanner                        String                @default("")
  dateAdded                        DateTime?             @default(now())
  from_Project_network             Project[]             @relation("Project_network")
  from_Coupon_acceptFromNetworks   Coupon[]              @relation("Coupon_acceptFromNetworks")
  from_CustomTracker_network       CustomTracker[]       @relation("CustomTracker_network")
  from_LiquidityPair_network       LiquidityPair[]       @relation("LiquidityPair_network")
  from_Token_network               Token[]               @relation("Token_network")
  from_StableLiquidityPair_network StableLiquidityPair[] @relation("StableLiquidityPair_network")
  from_Order_paymentNetwork        Order[]               @relation("Order_paymentNetwork")
}

model StableLiquidityPair {
  id                            String          @id @default(cuid())
  name                          String          @default("")
  address                       String          @default("")
  pairToken                     Token[]         @relation("StableLiquidityPair_pairToken")
  network                       Network?        @relation("StableLiquidityPair_network", fields: [networkId], references: [id])
  networkId                     String?         @map("network")
  dateAdded                     DateTime?       @default(now())
  from_LiquidityPair_stablePair LiquidityPair[] @relation("LiquidityPair_stablePair")

  @@index([networkId])
}

model DiscordConfig {
  id                       String    @id @default(cuid())
  guildName                String    @default("")
  guildId                  String    @default("")
  announcementsChannelId   String    @default("")
  announcementsChannelName String    @default("")
  generalChannelId         String    @default("")
  generalChannelName       String    @default("")
  project                  Project?  @relation("DiscordConfig_project", fields: [projectId], references: [id])
  projectId                String?   @unique @map("project")
  dateAdded                DateTime? @default(now())
  updatedAt                DateTime? @updatedAt
}

model DiscordEvent {
  id                      String    @id @default(cuid())
  eventId                 String    @default("")
  guildId                 String    @default("")
  channelId               String    @default("")
  guildName               String    @default("")
  channelName             String    @default("")
  name                    String    @default("")
  description             String    @default("")
  inviteUrl               String    @default("")
  scheduledStartTimestamp DateTime?
  scheduledEndTimestamp   DateTime?
  location                String    @default("")
  userCount               Int?
  image                   String    @default("")
  project                 Project?  @relation("DiscordEvent_project", fields: [projectId], references: [id])
  projectId               String?   @map("project")
  dateAdded               DateTime? @default(now())
  updatedAt               DateTime? @updatedAt

  @@index([projectId])
}

model DiscordAnnouncement {
  id         String    @id @default(cuid())
  messageId  String    @default("")
  guildId    String    @default("")
  channelId  String    @default("")
  title      String    @default("")
  content    Json?
  messageUrl String    @default("")
  project    Project?  @relation("DiscordAnnouncement_project", fields: [projectId], references: [id])
  projectId  String?   @map("project")
  dateAdded  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@index([projectId])
}

model DiscordBot {
  id             String    @id @default(cuid())
  name           String    @default("")
  enabled        Boolean   @default(false)
  presence       String    @default("")
  botId          String    @default("")
  apiKey         String    @default("")
  tracking       String?
  customTracking String    @default("")
  project        Project?  @relation("DiscordBot_project", fields: [projectId], references: [id])
  projectId      String?   @map("project")
  dateAdded      DateTime? @default(now())

  @@index([projectId])
}

model Content {
  id              String        @id @default(cuid())
  title           String        @default("")
  slug            String        @default("")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  contentType     ContentType?  @relation("Content_contentType", fields: [contentTypeId], references: [id])
  contentTypeId   String?       @map("contentType")
  enabled         Boolean       @default(false)
  summary         String        @default("")
  richContent     Json?
  content         Json          @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  blockName       ContentBlock? @relation("Content_blockName", fields: [blockNameId], references: [id])
  blockNameId     String?       @map("blockName")
  user            User?         @relation("Content_user", fields: [userId], references: [id])
  userId          String?       @map("user")
  project         Project?      @relation("Content_project", fields: [projectId], references: [id])
  projectId       String?       @map("project")
  views           Int?
  likes           User[]        @relation("Content_likes")
  dateAdded       DateTime?     @default(now())

  @@index([contentTypeId])
  @@index([blockNameId])
  @@index([userId])
  @@index([projectId])
}

model Comment {
  id         String    @id @default(cuid())
  content    Json?
  sentiment  Int?
  likes      User[]    @relation("Comment_likes")
  reports    User[]    @relation("Comment_reports")
  user       User?     @relation("Comment_user", fields: [userId], references: [id])
  userId     String?   @map("user")
  project    Project?  @relation("Comment_project", fields: [projectId], references: [id])
  projectId  String?   @map("project")
  provider   Provider? @relation("Comment_provider", fields: [providerId], references: [id])
  providerId String?   @map("provider")
  dateAdded  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@index([userId])
  @@index([projectId])
  @@index([providerId])
}

model ContentBlock {
  id                     String    @id @default(cuid())
  title                  String    @default("")
  blockName              String    @default("")
  enabled                Boolean   @default(false)
  dateAdded              DateTime? @default(now())
  from_Content_blockName Content[] @relation("Content_blockName")
}

model ContentType {
  id                       String    @id @default(cuid())
  title                    String    @default("")
  typeName                 String    @default("")
  dateAdded                DateTime? @default(now())
  from_Content_contentType Content[] @relation("Content_contentType")
}

model Image {
  id              String    @id @default(cuid())
  title           String    @default("")
  slug            String    @default("")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  enabled         Boolean   @default(false)
  dateAdded       DateTime? @default(now())
}

model Block {
  id            String    @id @default(cuid())
  project       Project?  @relation("Block_project", fields: [projectId], references: [id])
  projectId     String?   @map("project")
  firstBlock    Int?      @default(0)
  previousBlock Int?      @default(0)
  lastBlock     Int?      @default(0)
  dateAdded     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  @@index([projectId])
}

model Transfer {
  id                    String    @id @default(cuid())
  project               Project?  @relation("Transfer_project", fields: [projectId], references: [id])
  projectId             String?   @map("project")
  amount                Float?    @default(0)
  type                  Int?
  address               String    @default("")
  fromAddress           String    @default("")
  toAddress             String    @default("")
  hash                  String    @default("")
  block                 Int?
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @updatedAt
  from_Holder_transfers Holder[]  @relation("Holder_transfers")

  @@index([projectId])
  @@index([toAddress])
  @@index([hash])
  @@index([createdAt])
}

model Holder {
  id         String     @id @default(cuid())
  address    String     @default("")
  balance    Float?     @default(0)
  note       String     @default("")
  isContract Boolean    @default(false)
  projects   Project?   @relation("Holder_projects", fields: [projectsId], references: [id])
  projectsId String?    @map("projects")
  transfers  Transfer[] @relation("Holder_transfers")
  dateAdded  DateTime?  @default(now())
  updatedAt  DateTime?  @updatedAt

  @@index([address])
  @@index([projectsId])
  @@index([dateAdded])
}

model Provider {
  id                        String    @id @default(cuid())
  name                      String    @default("")
  slug                      String    @default("")
  tags                      Tag[]     @relation("Provider_tags")
  contactEmail              String    @default("")
  isPromoted                Boolean   @default(false)
  enabled                   Boolean   @default(false)
  isListed                  Boolean   @default(false)
  displayEmail              Boolean   @default(false)
  openForWork               Boolean   @default(false)
  displayPrices             Boolean   @default(false)
  nickname                  String    @default("")
  image_filesize            Int?
  image_extension           String?
  image_width               Int?
  image_height              Int?
  image_id                  String?
  backgroundImage_filesize  Int?
  backgroundImage_extension String?
  backgroundImage_width     Int?
  backgroundImage_height    Int?
  backgroundImage_id        String?
  summary                   String    @default("")
  about                     String    @default("")
  offers                    String    @default("")
  website                   String    @default("")
  twitter                   String    @default("")
  telegram                  String    @default("")
  discord                   String    @default("")
  reddit                    String    @default("")
  youtube                   String    @default("")
  priceFrom                 Float?
  priceTo                   Float?
  views                     Float?    @default(0)
  user                      User?     @relation("Provider_user", fields: [userId], references: [id])
  userId                    String?   @unique @map("user")
  followers                 User[]    @relation("Provider_followers")
  votes                     Vote[]    @relation("Vote_provider")
  comments                  Comment[] @relation("Comment_provider")
  dateAdded                 DateTime? @default(now())
  updatedAt                 DateTime? @updatedAt
}

model Auditor {
  id                 String    @id @default(cuid())
  name               String    @default("")
  slug               String    @default("")
  enabled            Boolean   @default(false)
  isListed           Boolean   @default(false)
  image_filesize     Int?
  image_extension    String?
  image_width        Int?
  image_height       Int?
  image_id           String?
  description        String    @default("")
  website            String    @default("")
  twitter            String    @default("")
  telegram           String    @default("")
  discord            String    @default("")
  reddit             String    @default("")
  youtube            String    @default("")
  priceFrom          Float?
  priceTo            Float?
  dateAdded          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt
  from_Audit_auditor Audit[]   @relation("Audit_auditor")
}

model KycGroup {
  id                String    @id @default(cuid())
  name              String    @default("")
  slug              String    @default("")
  enabled           Boolean   @default(false)
  isListed          Boolean   @default(false)
  image_filesize    Int?
  image_extension   String?
  image_width       Int?
  image_height      Int?
  image_id          String?
  description       String    @default("")
  website           String    @default("")
  twitter           String    @default("")
  telegram          String    @default("")
  discord           String    @default("")
  reddit            String    @default("")
  youtube           String    @default("")
  priceFrom         Float?
  priceTo           Float?
  dateAdded         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  from_Kyc_kycGroup Kyc[]     @relation("Kyc_kycGroup")
}

model TransparencyRating {
  id        String    @id @default(cuid())
  rating    Int?      @default(0)
  ip        String    @default("")
  user      User?     @relation("TransparencyRating_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  project   Project?  @relation("TransparencyRating_project", fields: [projectId], references: [id])
  projectId String?   @map("project")
  dateAdded DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([userId])
  @@index([projectId])
  @@index([dateAdded])
}

model MarketingCampaign {
  id                                            String                   @id @default(cuid())
  name                                          String                   @default("")
  campaignId                                    String                   @default("")
  users                                         User[]                   @relation("MarketingCampaign_users")
  enabled                                       Boolean                  @default(true)
  status                                        String?                  @default("live")
  isInternal                                    Boolean                  @default(false)
  trackMarket                                   Boolean                  @default(true)
  trackSocial                                   Boolean                  @default(true)
  startDate                                     DateTime?                @postgresql.Date
  endDate                                       DateTime?                @postgresql.Date
  budget                                        Float?
  description                                   String                   @default("")
  notes                                         String                   @default("")
  agency                                        String                   @default("")
  agencyUrl                                     String                   @default("")
  project                                       Project?                 @relation("MarketingCampaign_project", fields: [projectId], references: [id])
  projectId                                     String?                  @map("project")
  marketStatSnapshot                            Json?
  finalSnapshot                                 Json?
  marketBudget                                  Float?
  socialBudget                                  Float?
  priceGoal                                     Float?
  marketCapGoal                                 Float?
  volumeGoal                                    Float?
  holdersGoal                                   Float?
  twitterGoal                                   Float?
  discordGoal                                   Float?
  telegramGoal                                  Float?
  dateAdded                                     DateTime?                @default(now())
  updatedAt                                     DateTime?                @updatedAt
  from_MarketingTrackerResult_marketingCampaign MarketingTrackerResult[] @relation("MarketingTrackerResult_marketingCampaign")

  @@index([projectId])
}

model MarketingTrackerResult {
  id                  String             @id @default(cuid())
  referer             String             @default("")
  ipAddress           String             @default("")
  userAgent           String             @default("")
  device              String             @default("")
  os                  String             @default("")
  timezone            String             @default("")
  city                String             @default("")
  country             String             @default("")
  countryCode         String             @default("")
  target              String             @default("")
  marketingCampaign   MarketingCampaign? @relation("MarketingTrackerResult_marketingCampaign", fields: [marketingCampaignId], references: [id])
  marketingCampaignId String?            @map("marketingCampaign")
  dateAdded           DateTime?          @default(now())
  updatedAt           DateTime?          @updatedAt

  @@index([marketingCampaignId])
  @@index([dateAdded])
}

model Cart {
  id           String    @id @default(cuid())
  user         User?     @relation("Cart_user", fields: [userId], references: [id])
  userId       String?   @map("user")
  cartItem     CartItem? @relation("CartItem_cart")
  couponCode   Coupon?   @relation("Cart_couponCode", fields: [couponCodeId], references: [id])
  couponCodeId String?   @map("couponCode")
  dateAdded    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt

  @@index([userId])
  @@index([couponCodeId])
}

model CartItem {
  id            String       @id @default(cuid())
  product       Product?     @relation("CartItem_product", fields: [productId], references: [id])
  productId     String?      @map("product")
  paymentPlan   PaymentPlan? @relation("CartItem_paymentPlan", fields: [paymentPlanId], references: [id])
  paymentPlanId String?      @map("paymentPlan")
  cart          Cart?        @relation("CartItem_cart", fields: [cartId], references: [id])
  cartId        String?      @unique @map("cart")
  price         Float?
  tax           Float?       @default(0)
  discount      Float?       @default(0)
  quantity      Float?       @default(1)
  dateAdded     DateTime?    @default(now())
  updatedAt     DateTime?    @updatedAt

  @@index([productId])
  @@index([paymentPlanId])
}

model Order {
  id                      String         @id @default(cuid())
  orderNumber             Int            @default(autoincrement())
  user                    User?          @relation("Order_user", fields: [userId], references: [id])
  userId                  String?        @map("user")
  orderItem               OrderItem?     @relation("OrderItem_order")
  project                 Project?       @relation("Order_project", fields: [projectId], references: [id])
  projectId               String?        @map("project")
  walletAddress           String         @default("")
  transactionHash         String         @default("")
  currency                String         @default("")
  currencyPriceEur        Float?
  durationInMonths        Float?
  paymentNetwork          Network?       @relation("Order_paymentNetwork", fields: [paymentNetworkId], references: [id])
  paymentNetworkId        String?        @map("paymentNetwork")
  discount                Float?         @default(0)
  tax                     Float?         @default(0)
  total                   Float?
  subTotal                Float?
  grandTotal              Float?
  couponCode              Coupon?        @relation("Order_couponCode", fields: [couponCodeId], references: [id])
  couponCodeId            String?        @map("couponCode")
  dateAdded               DateTime?      @default(now())
  updatedAt               DateTime?      @updatedAt
  from_Subscription_order Subscription[] @relation("Subscription_order")

  @@index([userId])
  @@index([projectId])
  @@index([paymentNetworkId])
  @@index([couponCodeId])
}

model OrderItem {
  id            String       @id @default(cuid())
  order         Order?       @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId       String?      @unique @map("order")
  product       Product?     @relation("OrderItem_product", fields: [productId], references: [id])
  productId     String?      @map("product")
  paymentPlan   PaymentPlan? @relation("OrderItem_paymentPlan", fields: [paymentPlanId], references: [id])
  paymentPlanId String?      @map("paymentPlan")
  price         Float?
  quantity      Float?       @default(1)
  discount      Float?       @default(0)
  tax           Float?       @default(0)
  dateAdded     DateTime?    @default(now())
  updatedAt     DateTime?    @updatedAt

  @@index([productId])
  @@index([paymentPlanId])
}

model Vote {
  id         String    @id @default(cuid())
  vote       Int?      @default(0)
  ip         String    @default("")
  type       String?
  user       User?     @relation("Vote_user", fields: [userId], references: [id])
  userId     String?   @map("user")
  project    Project?  @relation("Vote_project", fields: [projectId], references: [id])
  projectId  String?   @map("project")
  provider   Provider? @relation("Vote_provider", fields: [providerId], references: [id])
  providerId String?   @map("provider")
  dateAdded  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@index([userId])
  @@index([projectId])
  @@index([providerId])
}

model Quiz {
  id               String    @id @default(cuid())
  title            String    @default("")
  slug             String    @default("")
  imageUrl         String    @default("")
  image_filesize   Int?
  image_extension  String?
  image_width      Int?
  image_height     Int?
  image_id         String?
  enabled          Boolean   @default(false)
  hasRewards       Boolean   @default(false)
  rewardsAmount    Int?
  rewardType       String    @default("")
  description      Json?
  onWinDescription Json?
  onEndDescription Json?
  config           Json?
  totalWinners     Int?
  winners          Int?
  timePerQuestion  Int?      @default(0)
  views            Int?
  project          Project?  @relation("Quiz_project", fields: [projectId], references: [id])
  projectId        String?   @map("project")
  user             User?     @relation("Quiz_user", fields: [userId], references: [id])
  userId           String?   @map("user")
  likes            User[]    @relation("Quiz_likes")
  startDate        DateTime?
  endDate          DateTime?
  dateAdded        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt

  @@index([projectId])
  @@index([userId])
}

model Transcription {
  id              String    @id @default(cuid())
  title           String    @default("")
  slug            String    @default("")
  summary         String    @default("")
  transcriptionId String    @default("")
  isPublic        Boolean   @default(true)
  contentUrl      String    @default("")
  content         Json?
  user            User?     @relation("Transcription_user", fields: [userId], references: [id])
  userId          String?   @map("user")
  project         Project?  @relation("Transcription_project", fields: [projectId], references: [id])
  projectId       String?   @map("project")
  views           Int?
  likes           User[]    @relation("Transcription_likes")
  dateAdded       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt

  @@index([userId])
  @@index([projectId])
}

model EmailList {
  id        String    @id @default(cuid())
  email     String    @unique @default("")
  dateAdded DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model ServiceToken {
  id         String              @id @default(cuid())
  amount     Float?              @default(0)
  discount   Float?              @default(0)
  user       User?               @relation("ServiceToken_user", fields: [userId], references: [id])
  userId     String?             @unique @map("user")
  tokenUsage ServiceTokenUsage[] @relation("ServiceTokenUsage_serviceToken")
  dateAdded  DateTime?           @default(now())
  updatedAt  DateTime?           @updatedAt
}

model ServiceTokenUsage {
  id             String        @id @default(cuid())
  used           Float?        @default(0)
  description    String        @default("")
  serviceToken   ServiceToken? @relation("ServiceTokenUsage_serviceToken", fields: [serviceTokenId], references: [id])
  serviceTokenId String?       @map("serviceToken")
  dateAdded      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt

  @@index([serviceTokenId])
}

model Account {
  id                String    @id @default(cuid())
  user              UserAuth? @relation("Account_user", fields: [userId], references: [id])
  userId            String?   @map("user_id")
  type              String    @default("")
  provider          String    @default("")
  providerAccountId String    @unique @default("") @map("provider_account_id")
  refresh_token     String    @default("")
  access_token      String    @default("")
  expires_at        Int?
  token_type        String    @default("")
  scope             String    @default("")
  id_token          String    @default("")
  session_state     String    @default("")

  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String    @id @default(cuid())
  user         UserAuth? @relation("Session_user", fields: [userId], references: [id])
  userId       String?   @map("user_id")
  sessionToken String    @unique @default("") @map("session_token")
  expires      DateTime?

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  id         String    @id @default(cuid())
  identifier String    @default("")
  token      String    @unique @default("")
  expires    DateTime?

  @@map("verificationtokens")
}

model UserAuth {
  id            String    @id @default(cuid())
  name          String    @default("")
  email         String    @unique @default("")
  emailVerified DateTime? @map("email_verified")
  image         String    @default("")
  user          User?     @relation("User_userAuth")
  access_token  String    @default("")
  accounts      Account[] @relation("Account_user")
  sessions      Session[] @relation("Session_user")

  @@map("users")
}