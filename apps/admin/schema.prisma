// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                      String    @id @default(cuid())
  name                    String    @default("")
  firstName               String    @default("")
  lastName                String    @default("")
  email                   String    @unique @default("")
  roles                   Role[]    @relation("Role_users")
  password                String
  isAdmin                 Boolean   @default(false)
  isSubscribedToEmail     Boolean   @default(false)
  isNotChargeable         Boolean   @default(false)
  isVerified              Boolean   @default(true)
  subscribedTill          DateTime?
  referrer                String    @default("")
  referralCode            String    @default("")
  projects                Project[] @relation("Project_user")
  payments                Payment[] @relation("Payment_billedTo")
  dateCreated             DateTime? @default(now())
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?
}

model Payment {
  id             String    @id @default(cuid())
  name           String    @default("")
  description    String    @default("")
  quantity       Float
  price          Float
  discount       Float?
  tax            Float?
  amount         Float
  billedTo       User?     @relation("Payment_billedTo", fields: [billedToId], references: [id])
  billedToId     String?   @map("billedTo")
  paymentMethod  String    @default("")
  paymentAddress String    @default("")
  status         String?
  invoiceUrl     String    @default("")
  dateIssued     DateTime? @default(now())
  datePaid       DateTime?

  @@index([billedToId])
}

model Role {
  id             String    @id @default(cuid())
  name           String    @default("")
  slug           String    @default("")
  isAdmin        Boolean   @default(false)
  isModerator    Boolean   @default(false)
  isEditor       Boolean   @default(false)
  isProjectOwner Boolean   @default(false)
  users          User[]    @relation("Role_users")
  dateAdded      DateTime? @default(now())
}

model Project {
  id                          String          @id @default(cuid())
  name                        String          @default("")
  slug                        String          @default("")
  logo_filesize               Int?
  logo_extension              String?
  logo_width                  Int?
  logo_height                 Int?
  logo_id                     String?
  enabled                     Boolean         @default(false)
  isListed                    Boolean         @default(false)
  trackData                   Boolean         @default(false)
  trackHolders                Boolean         @default(false)
  isRebasing                  Boolean         @default(false)
  initialized                 Boolean         @default(false)
  markForDeletion             Boolean         @default(false)
  status                      String?
  tags                        Tag[]           @relation("Project_tags")
  contractAddress             String          @default("")
  pairAddress                 String          @default("")
  burnAddress                 String          @default("0x000000000000000000000000000000000000dead")
  liquidityPair               LiquidityPair[] @relation("LiquidityPair_project")
  network                     Network?        @relation("Project_network", fields: [networkId], references: [id])
  networkId                   String?         @map("network")
  trackHoldersFromTokenAmount Float?          @default(0)
  description                 String          @default("")
  launchDate                  DateTime?
  launchBlock                 Int?
  user                        User?           @relation("Project_user", fields: [userId], references: [id])
  userId                      String?         @map("user")
  notifications               Notification[]  @relation("Notification_project")
  ABI                         Json?
  customData                  Json?           @default("[]")
  sellTax                     Float?
  buyTax                      Float?
  rebasePeriod                String          @default("")
  apy                         Float?
  dailyApy                    Float?
  calendar                    String          @default("")
  website                     String          @default("")
  whitepaper                  String          @default("")
  twitter                     String          @default("")
  telegram                    String          @default("")
  discord                     String          @default("")
  reddit                      String          @default("")
  youtube                     String          @default("")
  github                      String          @default("")
  medium                      String          @default("")
  dateAdded                   DateTime?       @default(now())
  holders                     Holder[]        @relation("Project_holders")
  from_MarketStat_project     MarketStat[]    @relation("MarketStat_project")
  from_DiscordBot_project     DiscordBot[]    @relation("DiscordBot_project")
  from_Block_project          Block[]         @relation("Block_project")
  from_Transfer_project       Transfer[]      @relation("Transfer_project")
  from_Holder_projects        Holder[]        @relation("Holder_projects")

  @@index([networkId])
  @@index([userId])
}

model Notification {
  id        String    @id @default(cuid())
  title     String    @default("")
  enabled   Boolean   @default(false)
  content   String    @default("")
  type      String?
  project   Project?  @relation("Notification_project", fields: [projectId], references: [id])
  projectId String?   @map("project")
  dateAdded DateTime? @default(now())

  @@index([projectId])
}

model MarketStat {
  id               String    @id @default(cuid())
  price            Float?
  marketCap        Float?
  totalSupply      Float?
  liquidity        Float?
  pairPrice        Float?
  holders          Float?
  avgHoldings      Float?
  newHolders       Float?
  leavingHolders   Float?
  recurringHolders Float?
  customData       Json?     @default("[]")
  project          Project?  @relation("MarketStat_project", fields: [projectId], references: [id])
  projectId        String?   @map("project")
  dateAdded        DateTime? @default(now())

  @@index([projectId])
}

model LiquidityPair {
  id           String               @id @default(cuid())
  name         String               @default("")
  address      String               @default("")
  stablePair   StableLiquidityPair? @relation("LiquidityPair_stablePair", fields: [stablePairId], references: [id])
  stablePairId String?              @map("stablePair")
  network      Network?             @relation("LiquidityPair_network", fields: [networkId], references: [id])
  networkId    String?              @map("network")
  project      Project?             @relation("LiquidityPair_project", fields: [projectId], references: [id])
  projectId    String?              @map("project")
  exchange     Exchange?            @relation("LiquidityPair_exchange", fields: [exchangeId], references: [id])
  exchangeId   String?              @map("exchange")
  dateAdded    DateTime?            @default(now())

  @@index([stablePairId])
  @@index([networkId])
  @@index([projectId])
  @@index([exchangeId])
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @default("")
  projects  Project[] @relation("Project_tags")
  dateAdded DateTime? @default(now())
}

model Exchange {
  id                          String          @id @default(cuid())
  name                        String          @default("")
  logo_filesize               Int?
  logo_extension              String?
  logo_width                  Int?
  logo_height                 Int?
  logo_id                     String?
  url                         String          @default("")
  tradeUrl                    String          @default("")
  dateAdded                   DateTime?       @default(now())
  from_LiquidityPair_exchange LiquidityPair[] @relation("LiquidityPair_exchange")
}

model Token {
  id                                 String                @id @default(cuid())
  name                               String                @default("")
  address                            String                @default("")
  ABI                                Json?
  network                            Network?              @relation("Token_network", fields: [networkId], references: [id])
  networkId                          String?               @map("network")
  dateAdded                          DateTime?             @default(now())
  from_StableLiquidityPair_pairToken StableLiquidityPair[] @relation("StableLiquidityPair_pairToken")

  @@index([networkId])
}

model Network {
  id                               String                @id @default(cuid())
  name                             String                @default("")
  slug                             String                @default("")
  logo_filesize                    Int?
  logo_extension                   String?
  logo_width                       Int?
  logo_height                      Int?
  logo_id                          String?
  url                              String                @default("")
  scanner                          String                @default("")
  tokenScanner                     String                @default("")
  dateAdded                        DateTime?             @default(now())
  from_Project_network             Project[]             @relation("Project_network")
  from_LiquidityPair_network       LiquidityPair[]       @relation("LiquidityPair_network")
  from_Token_network               Token[]               @relation("Token_network")
  from_StableLiquidityPair_network StableLiquidityPair[] @relation("StableLiquidityPair_network")
}

model StableLiquidityPair {
  id                            String          @id @default(cuid())
  name                          String          @default("")
  address                       String          @default("")
  pairToken                     Token[]         @relation("StableLiquidityPair_pairToken")
  network                       Network?        @relation("StableLiquidityPair_network", fields: [networkId], references: [id])
  networkId                     String?         @map("network")
  dateAdded                     DateTime?       @default(now())
  from_LiquidityPair_stablePair LiquidityPair[] @relation("LiquidityPair_stablePair")

  @@index([networkId])
}

model DiscordBot {
  id             String    @id @default(cuid())
  name           String    @default("")
  enabled        Boolean   @default(false)
  presence       String    @default("")
  botId          String    @default("")
  apiKey         String    @default("")
  tracking       String?
  customTracking String    @default("")
  project        Project?  @relation("DiscordBot_project", fields: [projectId], references: [id])
  projectId      String?   @map("project")
  dateAdded      DateTime? @default(now())

  @@index([projectId])
}

model Content {
  id              String        @id @default(cuid())
  title           String        @default("")
  slug            String        @default("")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  contentType     ContentType?  @relation("Content_contentType", fields: [contentTypeId], references: [id])
  contentTypeId   String?       @map("contentType")
  enabled         Boolean       @default(false)
  summary         String        @default("")
  content         Json          @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  blockName       ContentBlock? @relation("Content_blockName", fields: [blockNameId], references: [id])
  blockNameId     String?       @map("blockName")
  dateAdded       DateTime?     @default(now())

  @@index([contentTypeId])
  @@index([blockNameId])
}

model ContentBlock {
  id                     String    @id @default(cuid())
  title                  String    @default("")
  blockName              String    @default("")
  enabled                Boolean   @default(false)
  dateAdded              DateTime? @default(now())
  from_Content_blockName Content[] @relation("Content_blockName")
}

model ContentType {
  id                       String    @id @default(cuid())
  title                    String    @default("")
  typeName                 String    @default("")
  dateAdded                DateTime? @default(now())
  from_Content_contentType Content[] @relation("Content_contentType")
}

model Image {
  id              String    @id @default(cuid())
  title           String    @default("")
  slug            String    @default("")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  enabled         Boolean   @default(false)
  dateAdded       DateTime? @default(now())
}

model Block {
  id            String    @id @default(cuid())
  project       Project?  @relation("Block_project", fields: [projectId], references: [id])
  projectId     String?   @map("project")
  firstBlock    Int?      @default(0)
  previousBlock Int?      @default(0)
  lastBlock     Int?      @default(0)
  dateAdded     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  @@index([projectId])
}

model Transfer {
  id                    String    @id @default(cuid())
  project               Project?  @relation("Transfer_project", fields: [projectId], references: [id])
  projectId             String?   @map("project")
  amount                Float?    @default(0)
  type                  Int?
  address               String    @default("")
  fromAddress           String    @default("")
  toAddress             String    @default("")
  hash                  String    @default("")
  block                 Int?
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @updatedAt
  from_Holder_transfers Holder[]  @relation("Holder_transfers")

  @@index([projectId])
  @@index([toAddress])
  @@index([hash])
  @@index([createdAt])
}

model Holder {
  id                   String     @id @default(cuid())
  address              String     @default("")
  balance              Float?     @default(0)
  note                 String     @default("")
  isContract           Boolean    @default(false)
  projects             Project[]  @relation("Holder_projects")
  transfers            Transfer[] @relation("Holder_transfers")
  dateAdded            DateTime?  @default(now())
  updatedAt            DateTime?  @updatedAt
  from_Project_holders Project[]  @relation("Project_holders")

  @@index([address])
  @@index([dateAdded])
}