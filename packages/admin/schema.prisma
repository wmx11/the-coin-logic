// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id             String          @id @default(cuid())
  name           String          @default("")
  email          String          @unique @default("")
  password       String
  subscribedTill DateTime?
  apiKey         String          @default("")
  apiSecret      String          @default("")
  Api            ApiAccessLevel? @relation("User_Api", fields: [ApiId], references: [id])
  ApiId          String?         @map("Api")
  projects       Project?        @relation("User_projects", fields: [projectsId], references: [id])
  projectsId     String?         @map("projects")

  @@index([ApiId])
  @@index([projectsId])
}

model MarketStat {
  id          String   @id @default(cuid())
  price       Float?
  marketCap   Float?
  totalSupply Float?
  liquidity   Float?
  pairPrice   Float?
  customData  String?  @default("[]")
  project     Project? @relation("MarketStat_project", fields: [projectId], references: [id])
  projectId   String?  @map("project")

  @@index([projectId])
}

model Project {
  id                      String       @id @default(cuid())
  name                    String       @default("")
  slug                    String       @default("")
  enabled                 Boolean      @default(false)
  tags                    Tag[]        @relation("Project_tags")
  contractAddress         String       @default("")
  pairAddress             String       @default("")
  pairToken               Token[]      @relation("Project_pairToken")
  network                 Network?     @relation("Project_network", fields: [networkId], references: [id])
  networkId               String?      @map("network")
  description             String       @default("")
  ABI                     String?
  customData              String?      @default("[]")
  website                 String       @default("")
  whitepaper              String       @default("")
  twitter                 String       @default("")
  telegram                String       @default("")
  discord                 String       @default("")
  reddit                  String       @default("")
  from_User_projects      User[]       @relation("User_projects")
  from_MarketStat_project MarketStat[] @relation("MarketStat_project")
  from_DiscordBot_project DiscordBot[] @relation("DiscordBot_project")

  @@index([networkId])
}

model Token {
  id                                 String                @id @default(cuid())
  name                               String                @default("")
  address                            String                @default("")
  ABI                                String?
  network                            Network?              @relation("Token_network", fields: [networkId], references: [id])
  networkId                          String?               @map("network")
  from_Project_pairToken             Project[]             @relation("Project_pairToken")
  from_StableLiquidityPair_pairToken StableLiquidityPair[] @relation("StableLiquidityPair_pairToken")

  @@index([networkId])
}

model StableLiquidityPair {
  id        String   @id @default(cuid())
  name      String   @default("")
  address   String   @default("")
  pairToken Token[]  @relation("StableLiquidityPair_pairToken")
  network   Network? @relation("StableLiquidityPair_network", fields: [networkId], references: [id])
  networkId String?  @map("network")

  @@index([networkId])
}

model Network {
  id                               String                @id @default(cuid())
  name                             String                @default("")
  url                              String                @default("")
  from_Project_network             Project[]             @relation("Project_network")
  from_Token_network               Token[]               @relation("Token_network")
  from_StableLiquidityPair_network StableLiquidityPair[] @relation("StableLiquidityPair_network")
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @default("")
  projects Project[] @relation("Project_tags")
}

model DiscordBot {
  id             String   @id @default(cuid())
  name           String   @default("")
  enabled        Boolean  @default(false)
  presence       String   @default("")
  botId          String   @default("")
  apiKey         String   @default("")
  tracking       String?
  customTracking String   @default("")
  project        Project? @relation("DiscordBot_project", fields: [projectId], references: [id])
  projectId      String?  @map("project")

  @@index([projectId])
}

model ApiAccessLevel {
  id               String  @id @default(cuid())
  name             String  @default("")
  enabled          Boolean @default(false)
  marketBots       Boolean @default(false)
  trackingInterval String?
  rateLimit        String?
  price            Int?
  from_User_Api    User[]  @relation("User_Api")
}